<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小小黄的博客</title>
  
  <subtitle>学习记录本</subtitle>
  <link href="http://xuzb0312.github.io/atom.xml" rel="self"/>
  
  <link href="http://xuzb0312.github.io/"/>
  <updated>2022-03-26T09:04:41.232Z</updated>
  <id>http://xuzb0312.github.io/</id>
  
  <author>
    <name>徐振斌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>I/O流（java基础）</title>
    <link href="http://xuzb0312.github.io/2022/03/26/IO%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://xuzb0312.github.io/2022/03/26/IO%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-03-26T12:54:57.000Z</published>
    <updated>2022-03-26T09:04:41.232Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="一、流的概念"><a href="#一、流的概念" class="headerlink" title="一、流的概念"></a>一、流的概念</h1><p>内存与存储设备之间传输数据的通道</p><p><img src="/IO%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/1998506-20200914231017273-598093604.png" alt="img"></p><h1 id="二、流的分类"><a href="#二、流的分类" class="headerlink" title="二、流的分类"></a>二、流的分类</h1><h2 id="2-1-按方向【重点】"><a href="#2-1-按方向【重点】" class="headerlink" title="2.1 按方向【重点】"></a>2.1 按方向【重点】</h2><ul><li>输入流：将&lt;存储设备&gt;中的内容读到&lt;内存&gt;中</li><li>输出流：将&lt;内存&gt;中的内容写到&lt;存储设备&gt;中</li></ul><h2 id="2-2-按单位"><a href="#2-2-按单位" class="headerlink" title="2.2 按单位"></a>2.2 按单位</h2><ul><li>字节流：以字节为单位，可以读写所有数据</li><li>字符流：以字符为单位，只能读写文本数据</li></ul><h2 id="2-3-按功能"><a href="#2-3-按功能" class="headerlink" title="2.3 按功能"></a>2.3 按功能</h2><ul><li>节点流：具有实际传输数据的读写功能</li><li>过滤流：在节点流的基础之上增强功能</li></ul><h1 id="三、字节流"><a href="#三、字节流" class="headerlink" title="三、字节流"></a>三、字节流</h1><p>字节流的父类（抽象类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InputStream 字节输入流</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OutputStream 字节输出流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> n)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-1-文件字节流"><a href="#3-1-文件字节流" class="headerlink" title="3.1 文件字节流"></a>3.1 文件字节流</h2><p>文件输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">// 1 创建FileInputStream 并指定文件路径</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\abc.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 2 读取文件</span></span><br><span class="line">    <span class="comment">// fis.read();</span></span><br><span class="line">    <span class="comment">// 2.1单字节读取</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        sout((<span class="type">char</span>)data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.2 一次读取多个字节</span></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>]; <span class="comment">// 大小为3的缓存区</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> fis.read(buf); <span class="comment">// 一次读3个</span></span><br><span class="line">    sout(<span class="keyword">new</span> <span class="title class_">String</span>(buf));</span><br><span class="line">    sout(count);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> fis.read(buf); <span class="comment">// 再读3个</span></span><br><span class="line">    sout(<span class="keyword">new</span> <span class="title class_">String</span>(buf));</span><br><span class="line">    sout(count2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上述优化后</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((count = fis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        sout(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 关闭</span></span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  <span class="comment">// 1 创建文件字节输出流</span></span><br><span class="line">  <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径&quot;</span>, <span class="literal">true</span>);<span class="comment">// true表示不覆盖 接着写 </span></span><br><span class="line"><span class="comment">// 2 写入文件</span></span><br><span class="line">  fos.write(<span class="number">97</span>);</span><br><span class="line">  fos.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="comment">// String string = &quot;hello world&quot;;</span></span><br><span class="line">  fos.write(string.getByte());<span class="comment">//获取String的字节</span></span><br><span class="line">  <span class="comment">// 3 关闭</span></span><br><span class="line">  fos.close();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="3-2-图片复制案例"><a href="#3-2-图片复制案例" class="headerlink" title="3.2 图片复制案例"></a>3.2 图片复制案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 创建流</span></span><br><span class="line"><span class="comment">// 1.1 文件字节输入流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径&quot;</span>);</span><br><span class="line"><span class="comment">// 1.2 文件字节输出流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutpuStream</span>(<span class="string">&quot;路径&quot;</span>);</span><br><span class="line"><span class="comment">// 2 边读边写</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((count = fis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">  fos.write(buf, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3 关闭</span></span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure><h2 id="3-3-字节缓冲流"><a href="#3-3-字节缓冲流" class="headerlink" title="3.3 字节缓冲流"></a>3.3 字节缓冲流</h2><p>缓冲流：BufferedInputStream&#x2F; BufferedOutputStream</p><ul><li>提高IO效率，减少访问磁盘次数</li><li>数据存储在缓冲区中，flush是将缓冲区的内容写入文件中，也可以直接close</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字节缓冲流 读取 文件</span></span><br><span class="line">psvm(String[] args) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  <span class="comment">// 1 创建BufferedInputStream</span></span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径&quot;</span>);</span><br><span class="line">  <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">  <span class="comment">// 2 读取</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>((data = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    sout((<span class="type">char</span>)data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 用自己创建的缓冲流</span></span><br><span class="line">  <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">  <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>((count = bis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">    sout(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3 关闭</span></span><br><span class="line">  bis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字节缓冲流 写入 文件</span></span><br><span class="line">psvm(String[] args) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  <span class="comment">// 1 创建BufferedInputStream</span></span><br><span class="line">  <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;路径&quot;</span>);</span><br><span class="line">  <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">  <span class="comment">// 2 写入文件</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    bos.write(<span class="string">&quot;hello&quot;</span>.getBytes());<span class="comment">// 写入8k缓冲区</span></span><br><span class="line">    bos.flush(); <span class="comment">// 刷新到硬盘</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3 关闭</span></span><br><span class="line">  bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、对象流"><a href="#四、对象流" class="headerlink" title="四、对象流"></a>四、对象流</h1><p><code>ObjectOutputStream / ObjectInputStream</code></p><ul><li>增强了缓冲区功能</li><li>增强了读写8种基本数据类型和字符串的功能</li><li>增强了读写对象的功能<ul><li><code>readObject()</code> 从流中读取一个对象</li><li><code>writeObject(Object obj)</code> 向流中写入一个对象</li></ul></li></ul><p>使用流传输对象的过程称为序列化、反序列化</p><h1 id="五、序列化与反序列化"><a href="#五、序列化与反序列化" class="headerlink" title="五、序列化与反序列化"></a>五、序列化与反序列化</h1><h2 id="5-1-序列化"><a href="#5-1-序列化" class="headerlink" title="5.1 序列化"></a>5.1 序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用objectoutputStream实现序列化</span></span><br><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// 1. 创建对象流</span></span><br><span class="line">  <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:\\st.bin&quot;</span>);</span><br><span class="line">  <span class="type">ObjectOutputSream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">objectOutputSream</span>(fos);</span><br><span class="line">  <span class="comment">// 2. 序列化（写入操作）</span></span><br><span class="line">  <span class="type">Student</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zs&quot;</span>, <span class="number">20</span>);</span><br><span class="line">  oos.WriteObject(zhangsan);</span><br><span class="line">  <span class="comment">// 3. 关闭</span></span><br><span class="line">  oos.close();</span><br><span class="line">  sout(<span class="string">&quot;序列化完毕&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-反序列化"><a href="#5-2-反序列化" class="headerlink" title="5.2 反序列化"></a>5.2 反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用ObjectInputSteam实现反序列化（读取重构对象）</span></span><br><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// 1. 创建对象流</span></span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\stu.bin&quot;</span>);</span><br><span class="line">  <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">  <span class="comment">// 2. 读取文件（反序列化）</span></span><br><span class="line">  <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)ois.readObject();</span><br><span class="line">  <span class="comment">// 3. 关闭</span></span><br><span class="line">  ois.close();</span><br><span class="line">  sout(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">  sout(s.toString());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-注意事项"><a href="#5-3-注意事项" class="headerlink" title="5.3 注意事项"></a>5.3 注意事项</h2><ol><li>某个类要想序列化必须实现Serializable接口</li><li>序列化类中对象属性要求实现Serializable接口</li><li>序列化版本号ID，保证序列化的类和反序列化的类是同一个类</li><li>使用transient修饰属性，这个属性就不能序列化</li><li>静态属性不能序列化</li><li>序列化多个对象，可以借助集合来实现</li></ol><h1 id="六、编码方式"><a href="#六、编码方式" class="headerlink" title="六、编码方式"></a>六、编码方式</h1><p><img src="/IO%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220316175746143.png" alt="image-20220316175746143"></p><h1 id="七、字符流"><a href="#七、字符流" class="headerlink" title="七、字符流"></a>七、字符流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统字节流读取</span></span><br><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// 1. 创建FileInputStream对象</span></span><br><span class="line">  <span class="type">FileInputSteam</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;路径&quot;</span>);</span><br><span class="line">  <span class="comment">// 2. 读取</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>((data = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    sout((<span class="type">char</span>)data); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 关闭</span></span><br><span class="line">  fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传统字节流读取汉字会出现乱码问题，因为一个汉字是由多个字节组合而成，而使用字节流一次只读一个字节，当然会乱码。</p><h2 id="7-1-字符流的父类（抽象类）"><a href="#7-1-字符流的父类（抽象类）" class="headerlink" title="7.1 字符流的父类（抽象类）"></a>7.1 字符流的父类（抽象类）</h2><p><code>reader</code> 字符输入流</p><ul><li><code>public int read()&#123;&#125;</code>读取单个字符</li><li><code>public int read(char[] c)&#123;&#125;</code>将字符读入数组</li><li><code>public int read(char[] b, int off, int len)&#123;&#125;</code>将字符读入数组的某一部分</li></ul><p><code>Writer</code> 字符输出流</p><ul><li><code>public void write(int n)&#123;&#125;</code>写入单个字符</li><li><code>public void write(String str)&#123;&#125;</code>写入字符串</li><li><code>public void write(char[] c)&#123;&#125;</code>写入字符串的某一部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建FileReader 文件字符输入流</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 读取</span></span><br><span class="line"><span class="comment">// 2.1 单个字符读取</span></span><br><span class="line"><span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    sout((<span class="type">char</span>)data);<span class="comment">// 读取一个字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];<span class="comment">// 字符缓冲区读取</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((count = fr.read(buf) != -<span class="number">1</span>))&#123;</span><br><span class="line">    sout(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 关闭</span></span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建FileWriter对象</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 写入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    fw.write(<span class="string">&quot;写入的内容&quot;</span>);</span><br><span class="line">    fw.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 关闭</span></span><br><span class="line">fw.close();</span><br><span class="line">sout(<span class="string">&quot;执行完毕&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="7-2-（案例-使用上述内容进行文本文件复制"><a href="#7-2-（案例-使用上述内容进行文本文件复制" class="headerlink" title="7.2 （案例)使用上述内容进行文本文件复制"></a>7.2 （案例)使用上述内容进行文本文件复制</h2><p><strong>不能复制图片或二进制文件，使用字节流可以复制任意文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">// 1. 创建</span></span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 读写</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        fw.write(data);</span><br><span class="line">        fw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 关闭</span></span><br><span class="line">    fw.close();</span><br><span class="line">    fr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-字符缓冲流"><a href="#7-3-字符缓冲流" class="headerlink" title="7.3 字符缓冲流"></a>7.3 字符缓冲流</h2><p><code>BufferedReader / BufferedWriter</code></p><p>高效读写、支持输入换行符、可一次写一行读一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  <span class="comment">// 创建缓冲流</span></span><br><span class="line">  <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">  <span class="comment">// 读取</span></span><br><span class="line">  <span class="comment">// 1. 第一种方式</span></span><br><span class="line">  <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">  <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>((count = br.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">    sout(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, count));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 第二种方式 一行一行读取</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">    sout(line);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line">  br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// 1. 创建BufferedWriter对象</span></span><br><span class="line">  <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">  <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">  <span class="comment">// 2. 写入</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    bw.write(<span class="string">&quot;写入的内容&quot;</span>);</span><br><span class="line">    bw.newLine(); <span class="comment">// 写入一个换行符</span></span><br><span class="line">    bw.flush();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 关闭</span></span><br><span class="line">  bw.close(); <span class="comment">// 此时会自动关闭fw</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-4-PrintWriter"><a href="#7-4-PrintWriter" class="headerlink" title="7.4 PrintWriter"></a>7.4 PrintWriter</h2><p>封装了<code>print() / println()</code> 方法 支持写入后换行</p><p>支持数据原样打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">    <span class="comment">// 1 创建打印流</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">    <span class="comment">// 2 打印</span></span><br><span class="line">    pw.println(<span class="number">12</span>);</span><br><span class="line">    pw.println(<span class="literal">true</span>);</span><br><span class="line">    pw.println(<span class="number">3.14</span>);</span><br><span class="line">    pw.println(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="comment">// 3 关闭</span></span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5-转换流"><a href="#7-5-转换流" class="headerlink" title="7.5 转换流"></a>7.5 转换流</h2><p>桥转换流 <code>InputStreamReader / OutputStreamWriter</code></p><p>可将字节流转换为字符流</p><p>可设置字符的编码方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  <span class="comment">// 1 创建InputStreamReader对象</span></span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FisInputStream</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">  <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">  <span class="comment">// 2 读取文件</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>((data = isr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    sout((<span class="type">char</span>)data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3 关闭</span></span><br><span class="line">  isr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  <span class="comment">// 1 创建OutputStreamReader对象</span></span><br><span class="line">  <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FisOutputStream</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">  <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">  <span class="comment">// 2 写入</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    osw.write(<span class="string">&quot;写入内容&quot;</span>);</span><br><span class="line">    osw.flush();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3 关闭</span></span><br><span class="line">  osw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、File类"><a href="#八、File类" class="headerlink" title="八、File类"></a>八、File类</h1><p>概念：代表物理盘符中的一个文件或者文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">File类的使用</span></span><br><span class="line"><span class="comment">1. 分隔符</span></span><br><span class="line"><span class="comment">2. 文件操作</span></span><br><span class="line"><span class="comment">3. 文件夹操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">  psvm(String[] args)&#123;</span><br><span class="line">    separator();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1. 分隔符</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">separator</span><span class="params">()</span>&#123;</span><br><span class="line">    sout(<span class="string">&quot;路径分隔符&quot;</span> + File.pathSeparator);</span><br><span class="line">    sout(<span class="string">&quot;名称分隔符&quot;</span> + File.separator);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 文件操作</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fileOpen</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123; <span class="comment">// 是否存在</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> file.creatNewFile();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 删除文件</span></span><br><span class="line">    <span class="comment">// 2.1 直接删除</span></span><br><span class="line">    file.delete(); <span class="comment">// 成功true</span></span><br><span class="line">    <span class="comment">// 2.2 使用jvm退出时删除</span></span><br><span class="line">    file.deleteOnExit();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 获取文件信息</span></span><br><span class="line">    sout(<span class="string">&quot;获取绝对路径&quot;</span> + file.getAbsolutePaht());</span><br><span class="line">    sout(<span class="string">&quot;获取路径&quot;</span> + file.getPath());</span><br><span class="line">    sout(<span class="string">&quot;获取文件名称&quot;</span> + file.getName());</span><br><span class="line">    sout(<span class="string">&quot;获取夫目录&quot;</span> + file.getParent());</span><br><span class="line">    sout(<span class="string">&quot;获取文件长度&quot;</span> + file.length());</span><br><span class="line">    sout(<span class="string">&quot;文件创建时间&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(file.lashModified()).toLocalString());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 判断</span></span><br><span class="line">    sout(<span class="string">&quot;是否可写&quot;</span> + file.canWrite());</span><br><span class="line">    sout(<span class="string">&quot;是否是文件&quot;</span> + file.isFile());</span><br><span class="line">    sout(<span class="string">&quot;是否隐藏&quot;</span> + file.isHidden());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 文件夹操作</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">directoryOpe</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">// 1. 创建文件夹</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    sout(dir.toString());</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">      <span class="comment">//dir.mkdir(); // 只能创建单级目录</span></span><br><span class="line">      dir.mkdirs(); <span class="comment">// 创建多级目录</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 删除文件夹</span></span><br><span class="line">    <span class="comment">// 2.1 直接删除</span></span><br><span class="line">    dir.delete(); <span class="comment">// 只能删除最底层空目录</span></span><br><span class="line">    <span class="comment">// 2.2 使用jvm删除</span></span><br><span class="line">    dir.deleteOnExit();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 获取文件夹信息</span></span><br><span class="line"> sout(<span class="string">&quot;获取绝对路径&quot;</span> + dir.getAbsolutePaht());</span><br><span class="line">    sout(<span class="string">&quot;获取路径&quot;</span> + dir.getPath());</span><br><span class="line">    sout(<span class="string">&quot;获取文件名称&quot;</span> + dir.getName());</span><br><span class="line">    sout(<span class="string">&quot;获取夫目录&quot;</span> + dir.getParent());</span><br><span class="line">    sout(<span class="string">&quot;获取文件长度&quot;</span> + dir.length());</span><br><span class="line">    sout(<span class="string">&quot;文件夹创建时间&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(dir.lashModified()).toLocalString());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 判断</span></span><br><span class="line">    sout(<span class="string">&quot;是否是文件夹&quot;</span> + dir.isFile());</span><br><span class="line">    sout(<span class="string">&quot;是否隐藏&quot;</span> + dir.isHidden());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5. 遍历文件夹</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dir2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    String[] files = dir2.list();</span><br><span class="line">    <span class="keyword">for</span>(String string : files)&#123;</span><br><span class="line">      sout(string);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// FileFilter接口的使用</span></span><br><span class="line">    </span><br><span class="line">    File[] files2 = dir2.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>()&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pathname.getName().endsWith(<span class="string">&quot;.jpg&quot;</span>))&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(File file : files2)&#123;</span><br><span class="line">      sout(file.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-1-递归遍历文件夹"><a href="#8-1-递归遍历文件夹" class="headerlink" title="8.1 递归遍历文件夹"></a>8.1 递归遍历文件夹</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  listDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\myfiles&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listDir</span><span class="params">(File dir)</span>&#123;</span><br><span class="line">  File[] files = dir.listFiles();</span><br><span class="line">  sout(dir.getAbsolutePath());</span><br><span class="line">  <span class="keyword">if</span>(files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(File file : files)&#123;</span><br><span class="line">      <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">        listDir(file); <span class="comment">// 递归</span></span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        sout(file.getAbsolutePath());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-递归删除文件夹"><a href="#8-2-递归删除文件夹" class="headerlink" title="8.2 递归删除文件夹"></a>8.2 递归删除文件夹</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteDir</span><span class="params">(File dir)</span>&#123;</span><br><span class="line">  File[] files = dir.listFiles();</span><br><span class="line">  <span class="keyword">if</span>(files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(File file : files)&#123;</span><br><span class="line">      <span class="keyword">if</span>(file.idDirectory())&#123;</span><br><span class="line">        deleteDir(file); <span class="comment">// 递归</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 删除文件</span></span><br><span class="line">        sout(file.getAbsolutePath() + <span class="string">&quot;删除&quot;</span> + file.delete());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JAVA基础的学习，IO流很重要，需要好好复习；</summary>
    
    
    
    <category term="JavaSE" scheme="http://xuzb0312.github.io/categories/JavaSE/"/>
    
    
    <category term="java" scheme="http://xuzb0312.github.io/tags/java/"/>
    
    <category term="javase基础" scheme="http://xuzb0312.github.io/tags/javase%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java常用类</title>
    <link href="http://xuzb0312.github.io/2022/03/26/%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <id>http://xuzb0312.github.io/2022/03/26/%E5%B8%B8%E7%94%A8%E7%B1%BB/</id>
    <published>2022-03-26T12:54:57.000Z</published>
    <updated>2022-03-26T09:08:49.901Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h1><h2 id="一、内部类"><a href="#一、内部类" class="headerlink" title="一、内部类"></a>一、内部类</h2><p>成员内部类、静态内部类、局部内部类、匿名内部类</p><p>概念：在一个类的内部再定义一个完整的类</p><p>特点：</p><ul><li>编译之后可生成独立的字节码文件</li><li>内部类可直接访问外部类私有成员，而不破坏封装</li><li>可为外部类提供必要的内部功能组件</li></ul><p><code>Outer$Inner.class</code> <code>Outer.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 身体</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Body</span>&#123;</span><br><span class="line">  <span class="comment">// 头部</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Header</span>&#123;</span><br><span class="line">    <span class="comment">// 也会生成class文件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a><strong>成员内部类</strong></h3><ul><li>在类的内部定义，与实例变量、实例方法同级别的类</li><li>外部类的一个实例部分，创建内部类对象时，必须依赖外部类对象</li><li>当外部类、内部类存在<strong>重名</strong>属性时，<strong>会优先访问内部类属性</strong></li><li>成员内部类里不能定义<strong>静态成员</strong>、可以包含<strong>静态常量(final)</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">  <span class="comment">//实例变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">  <span class="comment">//内部类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;北京&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;110&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//打印外部类属性 此时有重名属性name</span></span><br><span class="line">      sout(Outer.<span class="built_in">this</span>.name); <span class="comment">// 张三</span></span><br><span class="line">      sout(age);</span><br><span class="line">      <span class="comment">//打印内部类中的属性</span></span><br><span class="line">      sout(name); <span class="comment">// 李四</span></span><br><span class="line">      sout(address);</span><br><span class="line">      sout(phone);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  psvm(String[] args)&#123;</span><br><span class="line">    <span class="comment">// 创建外部类对象</span></span><br><span class="line">    <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">    <span class="comment">// 创建内部类对象</span></span><br><span class="line">    <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//一步到位</span></span><br><span class="line">    <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>(.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">                            </span><br><span class="line">    inner.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a><strong>静态内部类</strong></h3><ul><li>不依赖外部类对象，可直接创建或通过类名访问，可声明静态成员</li><li>只有内部类才可以使用static修饰</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">  <span class="comment">//实例变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 静态内部类，和外部类相同</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;上海&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">    <span class="comment">// 静态成员</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">// 调用外部类的属性</span></span><br><span class="line">      <span class="comment">// 1. 先创建外部类对象</span></span><br><span class="line">      <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">      <span class="comment">// 2. 调用外部类对象的属性</span></span><br><span class="line">      sout(outer.name);</span><br><span class="line">      sout(outer.age);</span><br><span class="line">      <span class="comment">// 调用静态内部类的属性和方法</span></span><br><span class="line">      sout(address);</span><br><span class="line">      sout(phone);</span><br><span class="line">      <span class="comment">// 调用静态内部类的静态属性</span></span><br><span class="line">      sout(Inner.count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  psvm(String[] args)&#123;</span><br><span class="line">    <span class="comment">// 直接创建静态内部类对象</span></span><br><span class="line">    Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.Inner();</span><br><span class="line">                     </span><br><span class="line">    inner.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a><strong>局部内部类</strong></h3><ul><li>定义在外部类<strong>方法</strong>中，作用范围和创建对象范围仅限于当前方法</li><li>局部内部类访问外部类当前方法中的局部变量时，因无法保障变量的生命周期与自身相同，变量必须修饰为final</li><li>限制类的使用范围</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">  <span class="comment">//实例变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;刘德华&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">35</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 定义局部变量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;sz&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 局部内部类：注意不能加任何访问修饰符</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;11234&quot;</span>;</span><br><span class="line">      <span class="keyword">private</span> <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;ldh@qq.com&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 访问外部类的属性</span></span><br><span class="line">        sout(name); <span class="comment">// 相当于 Outer.this.name</span></span><br><span class="line">        sout(age);</span><br><span class="line">        <span class="comment">// 访问内部类的属性</span></span><br><span class="line">        sout(<span class="built_in">this</span>.phone);</span><br><span class="line">        sout(<span class="built_in">this</span>.email);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 访问局部变量 jdk1.7要求必须常量final、jdk1.8自动添加final</span></span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建局部内部类对象</span></span><br><span class="line">    <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    inner.show2();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  psvm(String[] args)&#123;</span><br><span class="line">    <span class="comment">// 创建外部类对象</span></span><br><span class="line">    <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">                     </span><br><span class="line">    outer.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a><strong>匿名内部类</strong></h3><ul><li>没有类名的局部内部类（一切特征都与局部内部类相同）</li><li>必须继承一个父类或者实现一个接口</li><li>定义类、实现类、创建对象的语法合并，只能创建一个该类的对象</li><li>优点：减少代码量</li><li>缺点可读性较差</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用匿名内部类优化（相当于创建了一个局部内部类）</span></span><br><span class="line"><span class="type">Usb</span> <span class="variable">usb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Usb</span>()&#123; <span class="comment">// Usb为一个接口</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span>&#123;</span><br><span class="line">    sout(<span class="string">&quot;连接电脑成功，fan开始工作&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">usb.service();</span><br></pre></td></tr></table></figure><h2 id="二、Object类"><a href="#二、Object类" class="headerlink" title="二、Object类"></a>二、Object类</h2><ul><li>超类、基类，所有类的直接或间接父类，位于继承树的最顶层</li><li>任何类，如没有书写extends显示继承某个类，都默认直接继承Object类，否则为间接继承</li><li>Object类中所定义的方法，是所有对象都具备的方法</li><li>Object类型可以存储任何对象<ul><li>作为参数，可接受任何对象</li><li>作为返回值，可返回任何对象</li></ul></li></ul><h3 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass() 方法"></a><strong>getClass() 方法</strong></h3><ul><li><code>public final Class&lt;?&gt; getClass()&#123;&#125;</code></li><li>返回引用中存储的实际对象类型</li><li>应用：通常用于判断两个引用中实际存储对象类型是否一致</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 判断s1 和 s2是不是同一个类型</span><br><span class="line">Class class1 = s1.getClass();</span><br><span class="line">Class class2 = s2.getClass();</span><br><span class="line">// getClass返回 class类型</span><br></pre></td></tr></table></figure><h3 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a><strong>hashCode()方法</strong></h3><ul><li><code>public int hashCode()&#123;&#125;</code></li><li>返回该对象的哈希码值</li><li>哈希值根据对象的地址或字符串或数字使用hash算法计算出来的int类型的值</li><li>一般情况下相同对象返回相同哈希码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1.hashCode();</span><br><span class="line">s2.hashCode();</span><br><span class="line"><span class="comment">// 自然不同</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> s1; <span class="comment">// 此时s3的hashCode与s1相同</span></span><br></pre></td></tr></table></figure><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a><strong>toString()方法</strong></h3><ul><li><code>public String toSring()&#123;&#125;</code></li><li>返回该对象的字符串表示（表现形式）</li><li>可以根据程序需求覆盖该方法，如：展示对象各个属性值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sout(s1.toString()); <span class="comment">// 直接打印包+类名+哈希值</span></span><br><span class="line"><span class="comment">// 重写 alt + enter + s</span></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Student [name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a><strong>equals()方法</strong></h3><ul><li><code>public boolean equals(Object obj)&#123;&#125;</code></li><li>默认实现为(this &#x3D;&#x3D; obj), 比较两个对象地址是否相同</li><li>可进行覆盖，比较两个对象的内容是否相同</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断两个对象是否相等</span></span><br><span class="line">sout(s1.equals(s2)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Strudent</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">17</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Strudent</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">17</span>);</span><br><span class="line">sout(s4.equals(s5)); <span class="comment">// false 堆中地址不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写 改变其比较内容</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">步骤  1. 比较两个应用是否指向同一个对象</span></span><br><span class="line"><span class="comment">     2. 判断obj是否为null</span></span><br><span class="line"><span class="comment">     3. 判断两个引用只想的实际对象类型是否一致</span></span><br><span class="line"><span class="comment">     4. 强制类型转换</span></span><br><span class="line"><span class="comment">     5. 依次比较各个属性值是否相同</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">  <span class="comment">// 1.</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span> == obj)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.</span></span><br><span class="line">  <span class="keyword">if</span>(obj == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3.</span></span><br><span class="line">  <span class="comment">// if(this.getClass() == obj.getClass())&#123;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// instanceof 判断对象是否是某种类型</span></span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">    <span class="comment">// 4.强制类型转换</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)obj;</span><br><span class="line">    <span class="comment">// 5. 比较属性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.name.equals(s.getName()) &amp;&amp; <span class="built_in">this</span>.age == s.getAge())&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize() 方法"></a><strong>finalize() 方法</strong></h3><ul><li>当对象被判定为垃圾对象时，由JVM自动调用此方法，用以标记垃圾对象，进入回收队列</li><li>垃圾对象：<strong>没有有效引用指向此对象时，为垃圾对象</strong></li><li>垃圾回收：由gc销毁垃圾对象，释放数据存储空间</li><li>自动回收机制：JVM的内存耗尽，一次性回收所有垃圾对象</li><li>手动回收机制：使用<code>System.gc();</code>通知JVM执行垃圾回收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">  sout(<span class="built_in">this</span>.name + <span class="string">&quot;对象被回收了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">29</span>); <span class="comment">// 不是垃圾</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">30</span>); <span class="comment">// 是辣鸡 会被回收</span></span><br><span class="line">  <span class="comment">//回收垃圾</span></span><br><span class="line">  System.gc();</span><br><span class="line">  sout(<span class="string">&quot;回收垃圾&quot;</span>); </span><br><span class="line">  <span class="comment">// 打印出 “回收垃圾 </span></span><br><span class="line">  <span class="comment">//         aaa对象被回收了”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、包装类"><a href="#三、包装类" class="headerlink" title="三、包装类"></a>三、包装类</h2><ul><li><strong>基本数据类型</strong>所对应的<strong>引用数据类型</strong></li><li>Object 可统一所有数据，包装类的默认值是null</li></ul><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类型</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr></tbody></table><h3 id="类型转换与装箱、拆箱"><a href="#类型转换与装箱、拆箱" class="headerlink" title="类型转换与装箱、拆箱"></a><strong>类型转换与装箱、拆箱</strong></h3><ul><li>8种包装类提供不用类型间的转换方式<ol><li>Number父类中提供的6个共性方法</li><li><code>parseXXX( )</code>静态方法（基本类型与字符串的相互转换）</li><li><code>valueOf( )</code>静态方法（返回一个指定的int值的Integer实例）</li></ol></li><li>注意：需保证类型兼容，否则抛出NumberFormatException异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// 装箱， 基本类型 → 引用类型</span></span><br><span class="line">  <span class="comment">// 基本类型</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">  <span class="comment">// 使用Integer类创建对象</span></span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(num1);</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> Integer.valueOf(num1);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 拆箱， 引用类型 → 基本类型</span></span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> integer3.intValue();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 上述为jdk1.5之前方法，之后提供了自动装箱拆箱</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">  <span class="comment">// 自动装箱</span></span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer4</span> <span class="operator">=</span> age;</span><br><span class="line">  <span class="comment">// 自动拆箱</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">age2</span> <span class="operator">=</span> integer4;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 基本类型和字符串之间转换</span></span><br><span class="line">  <span class="comment">// 1. 基本类型转成字符串</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">  <span class="comment">// 1.1 使用+号</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 1.2 使用Integer中的toString()方法</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> Integer.toString(n1);</span><br><span class="line">  <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> Integer.toString(n1, x); <span class="comment">// x为进制要求</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2. 字符串转成基本类型</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;150&quot;</span>;</span><br><span class="line">  <span class="comment">// 使用Integer.parseXXX();</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// boolean 字符串形式转成基本类型，&quot;true&quot; ---&gt; true 非“true ———&gt; false</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;true&quot;</span>;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> Boolean.parseBoolean(str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整数缓冲区"><a href="#整数缓冲区" class="headerlink" title="整数缓冲区"></a><strong>整数缓冲区</strong></h3><ul><li>Java预先创建了256个常用的证书包装类型对象</li><li>在实际应用当中，对已创建的对象进行复用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// 面试题</span></span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">  sout(integer1 == integer2); <span class="comment">// false</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer3</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">// 自动装箱</span></span><br><span class="line">    <span class="comment">//相当于Integer.valueOf(100)</span></span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer4</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">  sout(integer3 == integer4); <span class="comment">// true</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer5</span> <span class="operator">=</span> <span class="number">200</span>;<span class="comment">// 自动装箱</span></span><br><span class="line">  <span class="type">Integer</span> <span class="variable">integer6</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">  sout(integer5 == integer6); <span class="comment">// false</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 因为缓存区数组 [-128, 127] 在这之内地址一样</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的100与200返回的结果为什么不一样？</p><p>涉及到缓冲区的东西，再Integer中有一个缓冲区域是在堆中存在的。-128——127，如果赋值再这个区域内，那么就会给他这个值的地址。如果不在这个区域内就new一个Integer。</p><h2 id="四、String类"><a href="#四、String类" class="headerlink" title="四、String类"></a>四、String类</h2><ul><li>字符串是常量，创建之后不可改变</li><li>字符串字面值存储在字符串池中，可以共享</li><li><code>String s = &quot;Hello&quot;;</code>产生一个对象，字符串池中存储</li><li><code>String s = new String(&quot;Hello&quot;);</code> 产生两个对象，<strong>堆、池</strong>各一个</li></ul><p><img src="/2022/03/26/%E5%B8%B8%E7%94%A8%E7%B1%BB/image-20220315155609384.png" alt="image-20220315155609384"></p><p>给字符串重新赋值时，并没有修改原来的值，而是重新开辟了一块内存空间。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a><strong>常用方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. length(); 返回字符串长度</span></span><br><span class="line"><span class="comment">// 2. charAt(int index); 返回某个位置的字符</span></span><br><span class="line"><span class="comment">// 3. contains(String str); 判断是否包含某个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;java是最好的语言&quot;</span>;</span><br><span class="line">sout(content.length()); <span class="comment">// 10</span></span><br><span class="line">sout(content.charAt(content.length() - <span class="number">1</span>)); <span class="comment">// 言</span></span><br><span class="line">sout(content.contains(<span class="string">&quot;java&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. toCharArray(); 返回字符串对应数组 </span></span><br><span class="line"><span class="comment">// 5. indexOf(); 返回子字符串首次出现的位置</span></span><br><span class="line"><span class="comment">// 6. lastIndexOf(); 返回字符串最后一次出现的位置</span></span><br><span class="line"></span><br><span class="line">sout(Arrays.toString(content.toCharArray()));</span><br><span class="line">sout(content.indexOf(<span class="string">&quot;java&quot;</span>)); <span class="comment">// 0</span></span><br><span class="line">sout(content.indexOf(<span class="string">&quot;java&quot;</span>, <span class="number">4</span>)); <span class="comment">// 从索引4开始找 </span></span><br><span class="line">sout(content.lastIndexOf(<span class="string">&quot;java&quot;</span>)); <span class="comment">// 从最后面开始查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. trim(); //去掉字符串前后空格</span></span><br><span class="line"><span class="comment">// 8. toUpperCase(); toLowerCase(); 转换大小写</span></span><br><span class="line"><span class="comment">// 9. endWith(str); startWith(str);  判断是否以str 结尾、开头</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="string">&quot; hello world &quot;</span>;</span><br><span class="line">sout(ct.trim()); <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line">sout(ct.toUpperCase()); <span class="comment">// HELLO WORLD</span></span><br><span class="line">sout(ct.toLowerCase()); <span class="comment">// hello world</span></span><br><span class="line">sout(ct.endWith(<span class="string">&quot;world&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">sout(ct.startWith(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 10. replace(char old, char new); 用新的字符或字符串替换旧的字符或字符串</span></span><br><span class="line"><span class="comment">// 11. split(); 对字符串拆分</span></span><br><span class="line"></span><br><span class="line">sout(content.replace(<span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>)); <span class="comment">// php是最好的语言, php no1</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">say</span> <span class="operator">=</span> <span class="string">&quot;java is the best language&quot;</span>;</span><br><span class="line">String[] arr = say.split(<span class="string">&quot; &quot;</span>); <span class="comment">// &quot;[ ,]+&quot; 表示空格 逗号切分 +号表示切分可以多个 比如多个空格</span></span><br><span class="line">sout(arr.length); <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">for</span>(String string : arr)&#123;</span><br><span class="line">  sout(string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印出 </span></span><br><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="comment">//is</span></span><br><span class="line"><span class="comment">//the </span></span><br><span class="line"><span class="comment">//best</span></span><br><span class="line"><span class="comment">//language</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充两个equals/compareTo();比较大小</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line">sout(s1.equalsIgnoreCase(s2));<span class="comment">// 忽略大小写比较true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// compareTo(); 两字符不同时比较字符字典序的ascii码</span></span><br><span class="line"><span class="comment">// 字符相同时比较长度 返回差值</span></span><br></pre></td></tr></table></figure><p><strong>案例演示</strong></p><p>需求：</p><ol><li>已知String str &#x3D; “this is a text”;</li><li>将str中的单词单独获取</li><li>将str中的text替换成practice</li><li>在text前面插入一个easy</li><li>将每个单词的首字母改为大写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;this is a text&quot;</span>;</span><br><span class="line">  <span class="comment">// 2. </span></span><br><span class="line">  String[] arr = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(String s : arr)&#123;</span><br><span class="line">    sout(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3.</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str.replace(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;practice&quot;</span>);</span><br><span class="line">  <span class="comment">// 4. </span></span><br><span class="line">  <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> str.replace(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;easy text&quot;</span>);</span><br><span class="line">  <span class="comment">// 5. </span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i ++)&#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">first</span> <span class="operator">=</span> arr[i].charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="type">char</span> <span class="variable">upperfirst</span> <span class="operator">=</span> Character.toUpperCase(first);</span><br><span class="line">    <span class="type">String</span> <span class="variable">new</span> <span class="operator">=</span> upperfirst + arr[i].substring(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变字符串"><a href="#可变字符串" class="headerlink" title="可变字符串"></a><strong>可变字符串</strong></h3><ul><li>StringBuffer : 可变长字符串，运行效率慢、线程安全</li><li>StringBuilder : 可边长字符串、运行快、线程不安全</li></ul><p>效率都比String高且节省内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// StringBuffer 和 StringBuilder 用法一致</span></span><br><span class="line">  <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">  <span class="comment">// 1. append(); 追加</span></span><br><span class="line">  sb.append(<span class="string">&quot;java no1&quot;</span>);</span><br><span class="line">  <span class="comment">// 2. insert(); 添加、插入</span></span><br><span class="line">  sb.insert(<span class="number">0</span>, <span class="string">&quot;在第一个位置插入&quot;</span>);</span><br><span class="line">  <span class="comment">// 3.replace(); 替换</span></span><br><span class="line">  sb.replace(<span class="number">0</span>, <span class="number">9</span>, str); <span class="comment">// 左闭右开</span></span><br><span class="line">  <span class="comment">// 4. delete(); 删除</span></span><br><span class="line">  sb.delete(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 左闭右开</span></span><br><span class="line">  <span class="comment">// 5. 清空</span></span><br><span class="line">  sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、BigDecimal-类"><a href="#五、BigDecimal-类" class="headerlink" title="五、BigDecimal 类"></a>五、BigDecimal 类</h2><ul><li>位置 <code>java.math</code> 包中</li><li>作用 精确计算浮点数</li><li>创建方式 <code>BigDecimal bd = new BigDecimal(&quot;1.0&quot;);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>); <span class="comment">// 需用字符串</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line"><span class="comment">// 减法</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">r1</span> <span class="operator">=</span> bd1.subtract(bd2);</span><br><span class="line">sout(r1); <span class="comment">// 0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加法</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">r2</span> <span class="operator">=</span> bd1.add(bd2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">r3</span> <span class="operator">=</span> bd1.multiply(bd2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除法</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">r4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.4&quot;</span>).subtract(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.5&quot;</span>)).divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>), x, BigDecimal.ROUND_HALF_UP); </span><br><span class="line"><span class="comment">//除不尽时 x填保留位数 后面为四舍五入之意</span></span><br></pre></td></tr></table></figure><h3 id="Date-类"><a href="#Date-类" class="headerlink" title="Date 类"></a><strong>Date 类</strong></h3><p>Date表示特定的瞬间，精确到毫秒。Date类中的大部分方法都已经被Calendar类中的方法所取代</p><p>时间单位：1s &#x3D; 1,000ms &#x3D; 1,000,000 μs &#x3D; 1,000,000,000 &#x3D; ns</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// 1 创建Date对象</span></span><br><span class="line">  <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  sout(date1.toString()); <span class="comment">//WED Sept 02 22:25:23 CST 2020</span></span><br><span class="line">  sout(date1.toLocaleString()); <span class="comment">// 已过时 但也能用 2020-9-2</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建昨天的</span></span><br><span class="line">  <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(date1.getTime() - (<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">1000</span>));</span><br><span class="line">  sout(date2.toLocaleString());</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2 方法after before</span></span><br><span class="line">  <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> date.after(date2);</span><br><span class="line">  sout(b1); <span class="comment">//true</span></span><br><span class="line">  <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> date1.before(date2);</span><br><span class="line">  sout(b2); <span class="comment">//false</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 比较compareTo();</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> date1.compareTo(date1);</span><br><span class="line">  sout(d); <span class="comment">// 多的为1 少的为 -1 </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 比较是否相等 equals()</span></span><br><span class="line">  <span class="type">boolean</span> <span class="variable">b3</span> <span class="operator">=</span> date1.equals(date2);</span><br><span class="line">  sout(b3); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a><strong>Calendar</strong></h3><ul><li>Calendar提供了获取或设置各种日历字段的方法</li><li>构造方法 <code>protected Calendar();</code> 由于是protected 所以无法直接创建</li><li>其他方法</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">static Calendar getInstance()</td><td align="left">使用默认时区和区域获取日历</td></tr><tr><td align="left">void set(int year, int month, int date, int hourofday, int minute, int second)</td><td align="left">设置日历的年、月、日、时、分、秒</td></tr><tr><td align="left">int get(int field)</td><td align="left">返回给定日历字段的值。字段比如年、月、日</td></tr><tr><td align="left">void setTime(Date date)</td><td align="left">用给定的date设置此日历时间</td></tr><tr><td align="left">Date getTime()</td><td align="left">返回一个date表示此日历的时间</td></tr><tr><td align="left">void add(int field, int amount)</td><td align="left">按照日历的规则，给指定字段添加或减少时间量</td></tr><tr><td align="left">long getTimeInMilles()</td><td align="left">毫秒为单位返回该日历的时间值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// 1. 创建 Calendar 对象</span></span><br><span class="line">  <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">  sout(calendar.getTime().toLocaleString());</span><br><span class="line">  <span class="comment">// 2. 获取时间信息</span></span><br><span class="line">  <span class="comment">// 获取年</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">  <span class="comment">// 获取月 从 0 - 11</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH);</span><br><span class="line">  <span class="comment">// 日</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">  <span class="comment">// 小时</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">  <span class="comment">// 分钟</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> calendar.get(Calendar.MINUTE);</span><br><span class="line">  <span class="comment">// 秒</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> calendar.get(Calendar.SECOND);</span><br><span class="line">  <span class="comment">// 3. 修改时间</span></span><br><span class="line">  <span class="type">Calendar</span> <span class="variable">calendar2</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">  calendar2.set(Calendar.DAY_OF_MONTH, x);</span><br><span class="line">  <span class="comment">// 4. add修改时间</span></span><br><span class="line">  calendar2.add(Calendar.HOUR, x); <span class="comment">// x为正就加 负就减</span></span><br><span class="line">  <span class="comment">// 5. 补充方法</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> calendar2.getActualMaximum(Calendar.DAY_OF_MONTH);<span class="comment">// 月数最大天数</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> calendar2.getActualMinimum(Calendar.DAY_OF_MONTH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a><strong>SimpleDateFormat</strong></h3><ul><li>SimpleDateFormat是一个以与语言环境有关的方式来格式化和解析日期的具体类</li><li>进行格式化（日期→文本）、解析（文本→日期）</li><li>常用的时间模式字母</li></ul><table><thead><tr><th align="left">字母</th><th align="left">日期或时间</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">y</td><td align="left">年</td><td align="left">2019</td></tr><tr><td align="left">08</td><td align="left">年中月份</td><td align="left">08</td></tr><tr><td align="left">d</td><td align="left">月中天数</td><td align="left">10</td></tr><tr><td align="left">H</td><td align="left">一天中小时（0-23）</td><td align="left">22</td></tr><tr><td align="left">m</td><td align="left">分钟</td><td align="left">16</td></tr><tr><td align="left">s</td><td align="left">秒</td><td align="left">59</td></tr><tr><td align="left">S</td><td align="left">毫秒</td><td align="left">356</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">// 1. 创建对象</span></span><br><span class="line">  <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH-mm-ss&quot;</span>);</span><br><span class="line">  <span class="comment">// 2. 创建Date</span></span><br><span class="line">  <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="comment">// 格式化date（日期→字符串）</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">  sout(str);</span><br><span class="line">  <span class="comment">// 解析（字符串→时间）</span></span><br><span class="line">  <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;1948/03/12&quot;</span>);</span><br><span class="line">  sout(date2); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、System类"><a href="#六、System类" class="headerlink" title="六、System类"></a>六、System类</h2><p>主要用于获取系统的属性数据和其他操作，构造方法私有的</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">static void arraycopy(…)</td><td align="left">复制数组</td></tr><tr><td align="left">static long currentTimeMillis();</td><td align="left">获取当前系统时间，返回毫秒值（70年到现在）</td></tr><tr><td align="left">static void gc();</td><td align="left">建议jvm赶快启动垃圾回收期器回收垃圾</td></tr><tr><td align="left">static void exit(int status);</td><td align="left">退出jvm 如果参数是0表示正常退出jvm 非0表示异常退出</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">psvm(String[] args)&#123;</span><br><span class="line">  <span class="comment">//arraycopy 复制</span></span><br><span class="line">  <span class="comment">//src-原数组 srcPos-从哪个位置开始复制0 dest-目标数组 destPos-目标数组的位置 length-复制的长度</span></span><br><span class="line">  <span class="type">int</span>[] arr = &#123;<span class="number">20</span>, <span class="number">18</span>, <span class="number">39</span>, <span class="number">3</span>&#125;;</span><br><span class="line">  <span class="type">int</span>[] dest = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">4</span>];</span><br><span class="line">  System.arraycopy(src, srcPos, dest, destPos, length);</span><br><span class="line">  sout(arr, <span class="number">4</span>, dest, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// Arrays.copyOf(original, newLength)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2022/03/26/%E5%B8%B8%E7%94%A8%E7%B1%BB/image-20220315175649586.png" alt="image-20220315175649586"></p><p><img src="/2022/03/26/%E5%B8%B8%E7%94%A8%E7%B1%BB/image-20220315175800235.png" alt="image-20220315175800235"></p>]]></content>
    
    
    <summary type="html">JAVA基础的学习；</summary>
    
    
    
    <category term="JavaSE" scheme="http://xuzb0312.github.io/categories/JavaSE/"/>
    
    
    <category term="java" scheme="http://xuzb0312.github.io/tags/java/"/>
    
    <category term="javase基础" scheme="http://xuzb0312.github.io/tags/javase%E5%9F%BA%E7%A1%80/"/>
    
    <category term="java常用类" scheme="http://xuzb0312.github.io/tags/java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE基础部分</title>
    <link href="http://xuzb0312.github.io/2022/03/26/JavaSE%E5%9F%BA%E7%A1%80/"/>
    <id>http://xuzb0312.github.io/2022/03/26/JavaSE%E5%9F%BA%E7%A1%80/</id>
    <published>2022-03-26T12:54:57.000Z</published>
    <updated>2022-03-26T09:08:21.363Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Java基础知识"><a href="#Java基础知识" class="headerlink" title="Java基础知识"></a>Java基础知识</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><h3 id="1、Java特性和优势："><a href="#1、Java特性和优势：" class="headerlink" title="1、Java特性和优势："></a>1、Java特性和优势：</h3><ul><li>简单性</li><li>面向对象</li><li>可移植性</li><li>高性能</li><li>分布式</li><li>动态性</li><li>多线程</li><li>安全性</li><li>健壮性</li></ul><h3 id="2、三大版本"><a href="#2、三大版本" class="headerlink" title="2、三大版本"></a>2、三大版本</h3><ul><li>JAVASE:标准版（桌面程序，控制台开发）</li><li>JAVAME:嵌入式开发（手机，小家电。。。）</li><li>JAVAEE:E企业级开发（web端，服务器开发）</li></ul><h3 id="3、JDK-JRE-JVM"><a href="#3、JDK-JRE-JVM" class="headerlink" title="3、JDK,JRE,JVM"></a>3、JDK,JRE,JVM</h3><ul><li>JDK：java开发工具</li><li>JRE：java运行时环境</li><li>JVM：java虚拟机</li></ul><p>三者关系：</p><p><img src="/2022/03/26/JavaSE%E5%9F%BA%E7%A1%80/image-20220305100343779.png" alt="image-20220305100343779"></p><h3 id="4、编译型和解释型"><a href="#4、编译型和解释型" class="headerlink" title="4、编译型和解释型"></a>4、编译型和解释型</h3><ul><li>编译型：编译整个文件，速度较快，</li><li>解释型：写一句翻译一句，速度较慢</li></ul><p>java先将.java文件编译成.class文件，再在虚拟机上使用解释器进行翻译。</p><p><img src="/2022/03/26/JavaSE%E5%9F%BA%E7%A1%80/image-20220305101203969.png" alt="image-20220305101203969"></p><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释 &#x2F;&#x2F;</p><p>多行注释 &#x2F; <em>………………..</em>&#x2F;</p><p>文档注释 &#x2F;**</p><ul><li></li></ul><p> *&#x2F;</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>Java所有组成部分都需要名字，类名，变量名以及方法名都被称为标识符。</li><li>标识符以字母，下划线，美元符号开始。</li><li>不能使用关键字作为变量名或者方法名。</li><li>标识符大小写敏感。</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>Java是强类型语言，所有变量必须定义后才能使用。</li><li>Java数据类型分为两大类：基本数据类型 引用数据类型</li></ul><p><strong>基本数据类型：</strong> </p><ul><li>byte占1个字节 范围：-128-127</li><li>short占2个字节 范围：-32768-32767</li><li>int占4个字节 范围:-2147483648-2147483647</li><li>long占8个字节 范围：-9223372036854775808-9223372036854775897</li><li>float占4个字节</li><li>double占8个字节</li><li>char占2个字节</li><li>Boolean占1位 只有true和false两个值</li></ul><p>拓展：</p><p><img src="/2022/03/26/JavaSE%E5%9F%BA%E7%A1%80/image-20220305105251646.png" alt="image-20220305105251646"></p><p><strong>注意：最好完全避免使用浮点数进行比较。</strong></p><p><strong>引用数据类型：</strong></p><p>类 接口 数组</p><p>1字节等于8位（bit）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//八种基本数据类型</span></span><br><span class="line"><span class="comment">//整数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">num3</span> <span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">30L</span>;<span class="comment">//long类型要在数字后加L；</span></span><br><span class="line"><span class="comment">//小数，浮点数</span></span><br><span class="line"><span class="type">float</span> <span class="variable">num5</span> <span class="operator">=</span> <span class="number">50.1F</span>;<span class="comment">//float型要在数字后加;</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num6</span> <span class="operator">=</span> <span class="number">3.1415926</span>;</span><br><span class="line"><span class="comment">//字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">//字符串，string不是关键字，是个类。</span></span><br><span class="line"><span class="comment">//String namea = &quot;abc&quot;;</span></span><br><span class="line"><span class="comment">//布尔  是否</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">blog</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Java是强类型语言，运算时，不同类型需转化为同一类型，然后进行计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;<span class="comment">//内存溢出</span></span><br><span class="line"><span class="comment">//强制转换  （类型）变量名  高--&gt;低</span></span><br><span class="line"><span class="comment">//自动转换   低--&gt;高</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">        注意</span></span><br><span class="line"><span class="comment">        1.不能把布尔类型进行转换</span></span><br><span class="line"><span class="comment">        2.不能把对象类型转化为不相干的类型</span></span><br><span class="line"><span class="comment">        3.在把高容量转化为低容量时，强制转换</span></span><br><span class="line"><span class="comment">        4.转化时可能存在内存溢出，或精度问题</span></span><br><span class="line"><span class="comment">         */</span></span><br></pre></td></tr></table></figure><p>低–&gt;高</p><p>byte，short，char-&gt; int -&gt;long -&gt;float -&gt;double</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量是什么：就是可以变化的量</li><li>Java是强类型语言，每个变量必须声明其类型。</li><li>Java变量是程序中最基本的存储单元，其要素包括变量名，数据类型和作用域。</li><li>格式： type varName &#x3D; value</li></ul><p>注意：</p><ul><li>每个变量都有类型，类型可以是基本数据类型，也可以是引用数据类型。</li><li>变量名必须是合法的标识符</li><li>变量名是一条完整的语句，以分号结尾。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span> &#123;</span><br><span class="line">    <span class="comment">//属性，变量</span></span><br><span class="line">    <span class="comment">//类变量 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> <span class="number">2500</span>;</span><br><span class="line">    <span class="comment">//实例变量，从属于对象,不初始化会输出默认值</span></span><br><span class="line">    <span class="comment">//布尔值 默认是false</span></span><br><span class="line">    <span class="comment">//除了基本数据类型，其余的默认值是null</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//局部变量 必须声明和初始化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//变量类型  变量名字 = new Demo08();</span></span><br><span class="line">        <span class="type">Demo08</span> <span class="variable">demo08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo08</span>();</span><br><span class="line">        System.out.println(demo08.name);</span><br><span class="line">        System.out.println(demo08.name);</span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>初始化后不会更改的值，用final关键字修饰，常量名一般使用大写字母。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo09</span> &#123;</span><br><span class="line">    <span class="comment">//修饰符，没有先后顺序</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量名命名规范！！"><a href="#变量名命名规范！！" class="headerlink" title="变量名命名规范！！"></a>变量名命名规范！！</h3><ul><li>所有的变量，方法，类名；见名知意。</li><li>类成员变量，局部变量：首字母小写和驼峰原则，例：mouthSalary。</li><li>方法名：首字母小写和驼峰原则，例：mouthSalary（）。</li><li>常量：大写字母和下划线，MAX_VALUE。</li><li>类名：首字母大写和驼峰原则。</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>算术运算符：+，-，*，&#x2F;，%，++，—</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//++    --  自增  自减  一元运算符</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;<span class="comment">//给b赋值后自增</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a;<span class="comment">//自增后赋值给c</span></span><br></pre></td></tr></table></figure><ul><li><p>赋值运算符：&#x3D;</p></li><li><p>关系运算符：&gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;, &#x3D;&#x3D;, !&#x3D;instanseof</p></li><li><p>逻辑运算符：&amp;&amp;, ||, !</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与(and)    或(or)   非(取反)</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a &amp;&amp; b: &quot;</span>+(a&amp;&amp;b));<span class="comment">//逻辑与运算，两个变量都为真，结果才为true</span></span><br><span class="line">System.out.println(<span class="string">&quot;a || b: &quot;</span>+(a||b));<span class="comment">//逻辑或运算，两个变量有一个为真，结果就为true</span></span><br><span class="line">System.out.println(<span class="string">&quot;!(a&amp;&amp;b):&quot;</span>+!(a&amp;&amp;b));<span class="comment">//如果是真变为假，是假变为真</span></span><br><span class="line"><span class="comment">//短路运算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> (c&lt;<span class="number">4</span>)&amp;&amp;(c++&lt;<span class="number">4</span>);<span class="comment">//c小于4为假，直接返回false，不执行后面的</span></span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure><ul><li>位运算符：&amp;, |, ^, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;(了解)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    A = 0011 1100</span></span><br><span class="line"><span class="comment">    B = 0000 1101</span></span><br><span class="line"><span class="comment">    A&amp;B = 0000 1100 两个都为1才为1，其他都为0</span></span><br><span class="line"><span class="comment">    A|B = 0011 1101 两个都为0才为0，其他都为1</span></span><br><span class="line"><span class="comment">    A^b = 0011 0001 两个相同为0，不同为1</span></span><br><span class="line"><span class="comment">    ~B = 1100 0010  取反</span></span><br><span class="line"><span class="comment">    2*8 按位运算效率最快</span></span><br><span class="line"><span class="comment">    0000 0001 1</span></span><br><span class="line"><span class="comment">    0000 0010 2</span></span><br><span class="line"><span class="comment">    0000 0100 4</span></span><br><span class="line"><span class="comment">    0000 1000 8</span></span><br><span class="line"><span class="comment">    0001 0000 16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>条件运算符：? :</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//x ? y : z</span></span><br><span class="line">    <span class="comment">//如果x为true，结果为y，否则为z</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> score &lt; <span class="number">60</span> ?<span class="string">&quot;不及格&quot;</span>:<span class="string">&quot;及格&quot;</span>;</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>拓展赋值运算符：+&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;</li></ul><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><p>包的本质就是文件夹。</p><p>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间。</p><p>一般用公司域名倒置作为包名。</p><p>为了能够使用某一个包的成员，可使用import导入该包。</p><h3 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h3><p>java.util.Scanner是Java5的新特性，我们可以通过Scanner来获取用户的输入。</p><p>通过Scanner类的next()和nextLine()获取输入的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个扫描器对象，接受键盘输入</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;使用next方法接受：&quot;</span>);</span><br><span class="line">    <span class="comment">//判断用户是否输入字符串</span></span><br><span class="line">    <span class="keyword">if</span> (scanner.hasNext())&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的内容为：&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//属于 IO流的内容不关闭会一直占用资源</span></span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个扫描器对象，接受键盘输入</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;使用nextLine方法接受：&quot;</span>);</span><br><span class="line">    <span class="comment">//判断用户是否输入字符串</span></span><br><span class="line">    <span class="keyword">if</span> (scanner.hasNextLine())&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的内容为：&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//属于 IO流的内容不关闭会一直占用资源</span></span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>next():</strong> </p><ul><li>一定检测到有效字符串后才可以结束输入。</li><li>对输入有效字符串之前遇到的空白，会自动将其去掉。</li><li>输入有效字符后<strong>再输入空白</strong>会当作<strong>分隔符</strong>或<strong>结束符</strong>。</li><li>next()不能得到有空格的字符串</li></ul><p><strong>nextLine():</strong> </p><ol><li>以Enter为结束符，会输出回车之前所有的字符。</li><li>可以得到空白。</li></ol><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>顺序是最简单的算法结构，它由若干个依次执行的步骤组成，是任何一个算法都离不开的基本算法结构。</p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">   <span class="type">int</span> s= scanner.nextInt();</span><br><span class="line">   <span class="comment">//判断成绩</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span>&lt;=s&amp;&amp;s&lt;<span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s&lt;<span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入成绩不合法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>swith选择结构：</strong></p><p>判断一个变量与一系列值中某个值是否相等，case称为分支（JDK7后，swith支持字符串比较）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//switch</span></span><br><span class="line">    <span class="type">char</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//防止case穿透</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;未知等级&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>while循环；do…while循环（至少被执行一次）；for循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//输出1-100的和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//输出1-100的和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">100</span>);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>while与do…while的区别：<ul><li>while先判断后执行，dowhile是先执行后判断</li><li>dowhile总是保证循环体会被至少执行一次！这是他们的主要区别。</li></ul></li></ul><p>for循环是支持迭代的一直通用结构，是最有效，最灵活的循环结构（for循环的次数是在执行前就明确的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//计算100内的奇数和与偶数和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oddSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">evenSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            oddSum+=i;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            evenSum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;偶数和&quot;</span>+oddSum);</span><br><span class="line">    System.out.println(<span class="string">&quot;奇数和&quot;</span>+evenSum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//输出三角形</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">6</span>; j &gt;= i; j--) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= i; k++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt; i; k++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增强for循环（Java5引入，主要用于数组或者集合）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//增强for</span></span><br><span class="line">    <span class="type">int</span>[] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x:numbers)&#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>break</strong>用于强行退出循环，不执行循环后的语句。</p><p><strong>continue</strong>用于终止某次循环，即跳过循环中尚未执行的语句，接着进行下一次是否执行循环的判定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//break</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a&lt;<span class="number">88</span>)&#123;</span><br><span class="line">        a++;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="keyword">if</span> (a==<span class="number">22</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//continue</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><p>Java方法是语句的集合，它们在一起执行一个功能。</p><ul><li>方法是解决一类问题的步骤的有序集合</li><li>方法包含在类或对象中</li><li>方法在程序中创建，在其它地方被调用。</li></ul></li><li><p>设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块集合，我们<strong>设计方法的时候最好保持方法的原子性，就是一个方法只完成一个功能，这样便于我们后期的拓展</strong>。</p></li></ul><p><strong>方法的定义：</strong></p><p>​        <strong>Java的方法类似与其他语言的函数，是一段用来完成特定功能的代码片段</strong>。</p><p>方法由方法头和方法体组成，下面是一个方法的所有部分：</p><ol><li>修饰符：修饰符是可选的，告诉编译器如何调用该方法，定义方法的访问类型。</li><li>返回值类型：方法可能会有返回值，returnValueType是方法返回值的类型，没有返回值的方法，returnValueType是关键字void。</li><li>方法名：是方法的实际名称，方法名和参数表共同构成方法签名。</li><li>参数类型：参数像是一个占位符，当方法被调用时，传递值给参数；参数列表是指方法的参数类型，顺序，和参数的个数。参数的可 选的，方法可以不包含任何参数。<ul><li>形参：方法调用时用于接收外界输入的数据</li><li>实参：调用方法时实际传递给方法的数 据。</li></ul></li><li>方法体：包含具体的语句，定义该方法的功能。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><ul><li><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p></li><li><p>方法重载的规则：</p><ul><li>方法名必须相同；</li><li>参数列表必须不同（个数，类型，或参数顺序不同）；</li><li>方法的返回值可以相同也可以不相同；仅仅方 法返回类型不同不足以成为方法的重载。</li></ul></li></ul><p>实现理论：方法名相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，若匹配失效，会报错。</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数，任何普通参数必须在它之前声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//参数类型必须一样</span></span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>...i)</span>&#123;</span><br><span class="line">    System.out.println(i[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(i[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(i[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归结构包括两个部分；</p><ul><li>递归头：什么时候不调用自身方法，如果没有头，将陷入死循环</li><li>递归体：什么时候需要调用自身方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//输出5的阶乘</span></span><br><span class="line">    System.out.println(f(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//在栈操作，基数小的时候使用递归，基数大时候会出现内存崩溃</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组是<strong>相同类型</strong>数据的<strong>有序</strong>结合。</li><li>每一个数据称为数组元素</li><li>每个数组元素可以通过下标来访问（下标从0开始）。</li></ul><p>数组声明创建：首先必须声明数组变量才能在程序中使用，Java用new操作符来创建数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//声明数组</span></span><br><span class="line">    <span class="type">int</span>[] nums1;<span class="comment">//首选定义的方法</span></span><br><span class="line">    <span class="type">int</span> nums2[];<span class="comment">//效果相同，不推荐</span></span><br><span class="line">    <span class="comment">//创建数组</span></span><br><span class="line">    nums1 =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];<span class="comment">//可以存放4个int类型的数字</span></span><br><span class="line">    nums1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    nums1[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    nums1[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    nums1[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">    System.out.println(nums1[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//求数组元素的和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">    <span class="comment">//获取数组的长度 array.length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">        sum+=nums1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;数组的和为：&quot;</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组的三种初始化：</p><ol><li>静态初始化；</li><li>动态初始化；</li><li>数组的默认初始化：数组是引用类型，它的元素相当于类的实例变量，因此数组一 经分配空间，其中的每个元素也会被按照实例变量的方式被隐式初始化。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//静态初始化</span></span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//动态初始化 包含默认初始化</span></span><br><span class="line">    <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    System.out.println(b[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(b[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存：</p><p><img src="/2022/03/26/JavaSE%E5%9F%BA%E7%A1%80/image-20220307090432718.png" alt="image-20220307090432718"></p><p>数组的四个基本特点：</p><ul><li><p>数组的长度是确定的，一旦被创建，长度就不可以改变（如果越界，会出现数组下标越界异常）。</p></li><li><p>数组的元素必须是相同的类型。</p></li><li><p><strong>数组中元素可以是任意数据类型</strong>，包括基本类型和引用类型。</p></li><li><p>数组变量属<strong>引用类型，</strong>数组可以看成是对象，数组中每个元素相当于该对象的成员变量。数组本身就是对象，Java对象是在堆中的，因 此无论数组保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的。</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arrays = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> array : arrays) &#123;</span><br><span class="line">        System.out.print(array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    System.out.println();</span><br><span class="line">    printArray(arrays);</span><br><span class="line">    <span class="comment">//输出反转数组</span></span><br><span class="line">    System.out.println();</span><br><span class="line">    printArray(reverse(arrays));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转数组</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] arrays)&#123;</span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[arrays.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = result.length-<span class="number">1</span>; i &lt; arrays.length; i++,j--) &#123;</span><br><span class="line">        result[j] = arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arrays)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        System.out.print(arrays[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维数组：每一个元素都是一个一维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//二位数组</span></span><br><span class="line">    <span class="type">int</span>[][] arrays = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125; &#125;;</span><br><span class="line">    printArray(arrays[<span class="number">0</span>]);</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(arrays[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arrays[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arrays)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        System.out.print(arrays[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arraya类"><a href="#Arraya类" class="headerlink" title="Arraya类"></a>Arraya类</h3><ul><li>数组工具类java.util.Arrays</li><li>Arrays类中的方法都是static修饰的静态方法，在使用的搜索可以直接使用类名进行调用，而不用使用对象来调用（不用而不是不能）。</li><li>有以下功能：<ul><li>数组赋值:fill方法； </li><li>数组排序：sort方法，按升序； </li><li>比较数组：equals方法；</li></ul></li><li>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">22</span>, <span class="number">31</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">88</span>&#125;;</span><br><span class="line">    System.out.println(a);<span class="comment">//输出的是hashcode值</span></span><br><span class="line">    System.out.println(Arrays.toString(a));<span class="comment">//Arrays的toString方法输出数组</span></span><br><span class="line">    printArray(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自己的方法输出数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == a.length - <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序是八大算法中最出名的排序算法之一，外层冒泡轮数，里层依次比较，时间复杂度为O（n2)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//定义数组</span></span><br><span class="line">    <span class="type">int</span>[] array = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">22</span>,<span class="number">41</span>&#125;;</span><br><span class="line">    <span class="comment">//调用排序方法</span></span><br><span class="line">    <span class="type">int</span>[] sort = sort(array);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(Arrays.toString(sort));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//1.比较数组中相邻两个元素的大小，如果第一个比第二个大就交换它们的位置</span></span><br><span class="line"><span class="comment">//2.每一次比较，都会得到一个最大或最小的数字</span></span><br><span class="line"><span class="comment">//3.依次循环，直到结束</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] array)&#123;</span><br><span class="line">    <span class="comment">//临时变量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//外层循环，判断循环多少次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//j一轮循环后会得到一个最大的数，i代表倒着数已经排好的数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">            <span class="comment">//如果第一个比第二个大就交换位置</span></span><br><span class="line">            <span class="keyword">if</span> (array[j]&gt;array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                temp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="稀疏数组-棋盘缩小"><a href="#稀疏数组-棋盘缩小" class="headerlink" title="稀疏数组(棋盘缩小)"></a>稀疏数组(棋盘缩小)</h3><ul><li>稀疏数组：当一个数组中的大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存。</li><li>稀疏数组的处理方式是：<strong>记录数组一共有几行几列，有多少个不同值；把具有不同值的元素的行列和值记录在一个小规模的数组中，从而 缩小程序规模</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建二维数组11*11   0.没有棋子  1.黑棋    2.白棋</span></span><br><span class="line">    <span class="type">int</span>[][] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">    array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//输出原始数组</span></span><br><span class="line">    System.out.println(<span class="string">&quot;原始的数组为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">            System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转化为稀疏数组保存</span></span><br><span class="line">    <span class="comment">//获取有效值的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;有效值的个数：&quot;</span> + sum);</span><br><span class="line">    <span class="comment">//创建一个稀疏数组</span></span><br><span class="line">    <span class="type">int</span>[][] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">    array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">    array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">    array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">    <span class="comment">//遍历二维数组，将非0的数存放到稀疏数组中</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出稀疏数组</span></span><br><span class="line">    System.out.println(<span class="string">&quot;稀疏数组&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array2.length; j++) &#123;</span><br><span class="line">        System.out.println(array2[j][<span class="number">0</span>] + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                + array2[j][<span class="number">1</span>] + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                + array2[j][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//还原</span></span><br><span class="line">    System.out.println(<span class="string">&quot;还原稀疏数组&quot;</span>);</span><br><span class="line">    <span class="comment">//读取稀疏数组</span></span><br><span class="line">    <span class="type">int</span>[][] array3 = <span class="keyword">new</span> <span class="title class_">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">    <span class="comment">//给其他元素还原它的值 第0行存的是头部信息行和列，从第一行开始读取</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">        array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    System.out.println(<span class="string">&quot;原始的数组为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">            System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向过程-amp-面向对象（简称oo）"><a href="#面向过程-amp-面向对象（简称oo）" class="headerlink" title="面向过程&amp;面向对象（简称oo）"></a>面向过程&amp;面向对象（简称oo）</h3><ul><li><p>面向过程思想：</p><ul><li>步骤清晰简单，第一步做什么，第二步做什么… </li><li>面向过程适合处理一些较为简单的问题。</li></ul></li><li><p>面向对象思想：</p><ul><li>物理类聚，分类的思维模式，思考问题首先会把需要解决的问题分类，然后对这些分类进行单独的思考，最后才对某个分 类下的细节进行面向过程的思索；</li><li>面向过程适合处理复杂的问题，适合多人协同的问题。</li></ul></li><li><p>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思想来分析整个系统，但是，具体到细微操作，仍然需要面向过程的思想去处理。</p></li><li><p>面向对象编程（OOP）的本质就是：<strong>以类的方式组织代码，以对象组织（封装）数据。</strong></p></li><li><p>三大特征：封装，继承，多态。</p></li><li><p>从认知角度考虑是先有对象后有类，对象是具体的事物，类是抽象的，是对对象的抽象。</p></li><li><p><strong>从代码的角度是先有类后有对象，类是对象的模板。</strong></p></li></ul><h4 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//值传递</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    Demo04.change(a);</span><br><span class="line">    System.out.println(a);<span class="comment">//a=1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        a =<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="comment">//引用传递，对象；本质是值传递</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(person.name);<span class="comment">//null</span></span><br><span class="line">        Demo05.change(person);</span><br><span class="line">        System.out.println(person.name);<span class="comment">//zzr</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="comment">//person是一个对象</span></span><br><span class="line">       person.name = <span class="string">&quot;zzr&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个Person类，有一个属性name</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h4><ul><li>类是一种抽象的数据类型，它是对某一事物的具体描述&#x2F;定义，但是并不能代表某一个事物。（动物植物）</li><li>对象是抽象概念的具体实例。（狗、猫等）</li></ul><h4 id="创建对象与初始化"><a href="#创建对象与初始化" class="headerlink" title="创建对象与初始化"></a>创建对象与初始化</h4><p>使用new关键字创建对象，创建时会分配内存空间，还会给创建好的对象进行默认的初始化以及对类中默认构造器的调用。</p><p>类中的构造器也称为构造方法（类都有一个默认的构造方法），是在创建对象时必须调用的。</p><p>构造器有以下特点：必须和类的名字相同，必须没有返回类型，也不能写void。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo02;</span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//属性 字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span> .name+<span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo02;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="comment">//规范一个项目只有一个main方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类是抽象的，需要实例化</span></span><br><span class="line">        <span class="comment">//类实例化会方法一个自己的对象</span></span><br><span class="line">        <span class="comment">//student对象就是Student类的一个具体实例</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        student.age = <span class="number">18</span>;</span><br><span class="line">        System.out.print(student.name);</span><br><span class="line">        System.out.println(student.age);</span><br><span class="line">        student1.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">        student1.age = <span class="number">16</span>;</span><br><span class="line">        System.out.print(student1.name);</span><br><span class="line">        System.out.println(student1.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo02;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//Alt+insert 快捷键生成构造器</span></span><br><span class="line">    <span class="comment">//类有默认的构造方法</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//默认构造器</span></span><br><span class="line">    <span class="comment">//使用new关键字，本质是在调用构造器</span></span><br><span class="line">    <span class="comment">//用来初始化值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造 定义了有参构造 无参构造就必须定义显示出来</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo02;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="comment">//规范一个项目只有一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//实例化一个对象</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;zhou&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h3><p>在 <a href="https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020">JVM</a> 中，对象实体存储在 堆，对象引用是存储在 栈。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>Java三大特性：封装，继承，多态。</p><p>我们的程序设计要求“高内聚，低耦合”，</p><ul><li>高内聚就是类的内部数据操作细节由自己完成，不允许外部干涉</li><li>低耦合，仅暴露少量的方法供外部使用。</li></ul><p>封装（<strong>数据的隐藏 属性私有 get&#x2F;set</strong>）：通常，应禁止访问一个对象中数据的实际展示，而应通过接口来访问，这称为信息隐藏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo03;</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> id;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">char</span> sex;<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="comment">//ALt+insert 快捷键生成get/set方法</span></span><br><span class="line">    <span class="comment">//提供一些可供操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//get 获取这个属性   set设置属性的值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age&gt;<span class="number">120</span>||age&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">3</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo03;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.提高程序安全性 保护数据</span></span><br><span class="line"><span class="comment">    2.隐藏代码的实现细节</span></span><br><span class="line"><span class="comment">    3.统一接口</span></span><br><span class="line"><span class="comment">    4.提高系统的可维护性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化一个对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setName(<span class="string">&quot;周周&quot;</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line">        s1.setAge(<span class="number">88</span>);</span><br><span class="line">        System.out.println(s1.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>Java中只有单继承，没有多继承；继承关键字 extends。</li><li>继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖，组合，聚合等。</li><li>继承关系的两个类，一个为子类（派生类），一个为父类（基类），子类和父类i之间从意义上讲具有“is a”的关系。</li></ul><p>Object是所有类的父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo04;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//public 公共的</span></span><br><span class="line">    <span class="comment">//protect 受保护的</span></span><br><span class="line">    <span class="comment">//default 默认的（不写）</span></span><br><span class="line">    <span class="comment">//private 私有的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">money1</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;说话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMoney1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney1</span><span class="params">(<span class="type">int</span> money1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money1 = money1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo04;</span><br><span class="line"><span class="comment">//子类继承父类就会拥有父类的所有方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo04;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">   student.say();<span class="comment">//调用父类方法</span></span><br><span class="line">   student.getMoney1();<span class="comment">//调用父类私有属性</span></span><br><span class="line">        System.out.println(student.getMoney1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>super注意点：</strong></p><ul><li>super()调用父类的构造方法，必须在构造方法的第一个。</li><li>super必须只能出现在子类的方法或者构造方法中。</li><li>super和this不能同时调用构造方法。</li><li>this：本身调用者这个对象；super代表父类的对象 。</li><li>this在没有继承时也可以使用，super只能在继承条件下才可以使用。</li><li>this（）：本类的构造；</li><li>super（）：父类的构造。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo05;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person无参执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo05;</span><br><span class="line"><span class="comment">//子类继承父类就会拥有父类的所有方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//默认调用父类的无参构造</span></span><br><span class="line">        <span class="comment">//super()调用父类的构造方法，必须在构造方法的第一个</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        print();<span class="comment">//Stdent</span></span><br><span class="line">        <span class="built_in">this</span>.print();<span class="comment">//Student</span></span><br><span class="line">        <span class="built_in">super</span>.print();<span class="comment">//Teacher</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo05;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">   <span class="comment">//student.test1();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法的重写：</strong>有继承关系，子类重写父类的方法，<strong>方法名相同方法体不同</strong>，<strong>非静态的方法才可以重写</strong>。</p><p>为什么要重写？</p><ol><li>父类的功能，子类不一定需要，或者不一定满足。</li></ol><p>必要条件：</p><ul><li>方法名必须相同，参数列表必须相同，</li><li><strong>修饰符范围可以扩大不能缩小</strong>。public》protected》default》private</li><li>抛出的异常范围可以被缩小不能被放大。</li></ul><p>静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo06;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&gt;&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo06;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&gt;&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo06;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();<span class="comment">//A&gt;&gt;test()</span></span><br><span class="line">        <span class="comment">//父类的引用指向子类</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        b.test();<span class="comment">//B&gt;&gt;test()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo06;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&gt;&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo06;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="comment">//重写</span></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//注解 有功能的注释</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&gt;&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo06;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//静态方法和非静态方法区别很大</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();<span class="comment">//A&gt;&gt;test()</span></span><br><span class="line">        <span class="comment">//父类的引用指向子类</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();<span class="comment">//子类重写了父类的方法</span></span><br><span class="line">        b.test();<span class="comment">//A&gt;&gt;test()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多态（动态选择指向父类或者子类的方法）"><a href="#多态（动态选择指向父类或者子类的方法）" class="headerlink" title="多态（动态选择指向父类或者子类的方法）"></a>多态（动态选择指向父类或者子类的方法）</h4><ul><li><strong>即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。</strong></li><li>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多。</li><li>多态存在的条件：<ul><li>有继承关系</li><li>子类重写父类的方法</li><li>父类引用指向子类的对象。</li></ul></li></ul><p>注意：<strong>多态是指方法的多态，属性没有多态</strong>。static(方法属于类不属于实例)，final(常量)，private方法不能重写，不能实现多态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo07;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo07;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo07;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">//new Person();</span></span><br><span class="line">        <span class="comment">//可以指向的引用类型是不确定的,父类的引用指向子类</span></span><br><span class="line">        <span class="comment">//Student能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//Person父类型 可以指向子类 但不能调用子类独有的方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s2.run();<span class="comment">//子类重写了父类的方法，执行子类的方法</span></span><br><span class="line">        s1.run();</span><br><span class="line">        <span class="comment">//对象能执行哪些方法，主要看对象左边的类型</span></span><br><span class="line">        s1.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指向的方法<strong>看左边的类型，</strong>如果父类与子类中都有这个方法，那么指向子类的方法</li><li>父类只能调用子类与父类都有的方法，子类独有的方法，父类不能调用。</li></ul><p><strong>instanceof (类型转换) 引用类型</strong>判断一个对象是什么类型~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo08;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo08;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;go&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo08;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo08;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);  <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);  <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);  <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);  <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类型之间的转换 父  子</span></span><br><span class="line">        <span class="comment">//高--&gt;低</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//student将这个类型转化为Student类型，我们就可以使用Student类型的方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">        student.go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态static</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age; <span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;  <span class="comment">//非静态变量</span></span><br><span class="line">    <span class="comment">//非静态方法可以调用静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        go();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//static和类一起加载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(Student.age);</span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line">        System.out.println(s1.score);</span><br><span class="line">        go();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>().run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//匿名代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//静态代码块  最先执行 只执行一次</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(Math.random());</span></span><br><span class="line">        System.out.println(random());</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li>abstract修饰符如果修饰方法，那么该方法是抽象方法，如果修饰类那么该类就是抽象类。</li><li>抽象类中可以没有抽象方法，但是抽象方法的类一定要声明为抽象类。</li><li>抽象类不能用new关键来创建对象，它是用来让子类继承的。</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li><li>子类继承抽象类，那么就必须实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象来</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="comment">//抽象方法 只有方法的名字 没有方法的实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSameThing</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//不能new抽象来 只能子类去实现</span></span><br><span class="line">    <span class="comment">//抽象类中可以有普通方法 抽象方法只能在抽象方法中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类必须实现父类的抽象方法 除非子类也是抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSameThing</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>普通类：只有具体实现，声明用class。</li><li>抽象类：具体实现和规范（抽象方法）都可以有，声明用abstract。</li><li>接口：只有规范（抽象方法），自己无法写方法，约束和实现分离，声明用intenface。</li><li>接口就是规范，定义的一组规则；接口的本质是契约，就像人间的法律一样，制定好后大家都去遵守。</li><li>如果一个接口只有一个抽象方法，那么该接口就是一个函数式接口。</li><li>函数式接口的实例可以通过 lambda 表达式、方法引用或者构造方法引用来创建。</li><li>oo(面向对象)的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（如Java，C++，C#等），就是因为设计模式所研究的，实际上就是如何合理地区抽象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口  接口需要有实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//接口中的所有定义其实都是抽象的    默认public abstract修饰</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo11;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类通过implements实现接口</span></span><br><span class="line"><span class="comment">//实现了接口的类 就需要实现接口中所有的方法</span></span><br><span class="line"><span class="comment">//利用接口实现多继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>,TimeService&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ul><li>内部类就是在一个类的内部再定义一个类，比如A类中定义了一个B类，B就是A的内部类，A是B的外部类。</li></ul><p>成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//获取外部类的私有属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">inner</span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//没有名字初始化类 不用将实例保存到变量中</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Apple</span>().eat(); </span><br><span class="line">        <span class="comment">//接口的匿名内部类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UserService</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>什么是异常：</p><ul><li>实际生活中，会遇到各种各样的情况，比如，你写的某一个模块，用户的输入不一定符合你的要求，你的程序要打开某个文件，但这个文件可能不在或者格式不对等情况。</li><li>软件程序在运行的过程中可能会遇到以上的非法参数，文件找不到问题，我们叫异常（exception）。</li><li>异常发生在程序运行期间，它影响了正常的程序执行流程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="number">11</span>/<span class="number">0</span>);   <span class="comment">//java.lang.ArithmeticException</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>检查性异常：用户输入错误引起的异常，这是程序员无法遇见的。</li><li>运行时异常：运行时异常是可能被程序员避免的异常，与检查性异常相反，运行时异常可以在编译时被忽略。</li><li>错误：错误不是异常，而实脱离程序员控制的问题，错误在代码中通常被忽略。例如：当栈溢出时，错误就发生了，在编译时检查不到。</li></ol><p>Java把异常当一个对象来处理，并定义一个基类java.lang.Throwable作为所有异常的基类。</p><ul><li>Throwable: 分为Error 和 Exceotion。</li></ul><p><strong>Error</strong>分为AWTError和 VirtuMachineError</p><ul><li>VirtualMachineError有：<ul><li>StackOverFlowError</li><li>OutOfMemoryError。</li></ul></li></ul><p><strong>Exception:</strong> IOException和RuntimeException</p><ul><li>IOException有<ul><li>EOFException</li><li>FileNotFoundException，</li></ul></li><li>RuntimeException有 <ul><li>ArrithmeticException（算数异常）, </li><li>MissingResouurceException（丢失资源）, </li><li>ClassNotFoundException（找不到类）, </li><li>NullPointerException（空指针异常）, </li><li>ArrayIndexOutBoundsException（数组下标越界）, </li><li>UnKownException等…</li></ul></li></ul><p><img src="/2022/03/26/JavaSE%E5%9F%BA%E7%A1%80/image-20220308151411724.png" alt="image-20220308151411724"></p><ul><li>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行错误（ VirtualMachineError），当JVM不在有继续执行操作所需的内存资源时，将出现OutOfMemoryError，这些异常 发生时，Java虚拟机一般会选择线程终止。</li></ul><p>还有些发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError），链接错误（LinkageError），这些错误时不可察的，因为它们在应用程序的控制和处理能力之外，而且大多数是程序运行的时不允许出现的状况。</p><p>Exception一般有程序逻辑错误引起的，程序应从逻辑角度尽可能避免这类异常的方法。</p><h4 id="Error和Exception"><a href="#Error和Exception" class="headerlink" title="Error和Exception"></a>Error和Exception</h4><p>Error和Exception的区别：</p><ul><li>Error是灾难性的致命错误，是程序无法控制处理的，当出现这类情况时，Java虚拟机一般会选择终止线程。</li><li>Exception通常情况下是可以被程序处理的，并且在程序中应尽可能的去处理这些异常。</li></ul><p>异常处理机制：抛出异常，处理异常。</p><p>catch可以捕获多个异常，但要把范围小的写在前面。</p><p>无论出不出异常，finally的代码块都会被执行（finally可以不写），但是尽量添加finally代码块去释放占用的资源。</p><p>对于不确定的代码，可以加上try-catch去处理潜在的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e) &#123;<span class="comment">//catch（想要捕获的异常）</span></span><br><span class="line">            System.out.println(<span class="string">&quot;分母不能为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//catch（想要捕获的异常）</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;<span class="comment">//处理善后工作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Test02</span>().test(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();<span class="comment">//主动抛出异常  一般在方法中使用</span></span><br><span class="line">     &#125;</span><br><span class="line">    System.out.println(a/b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Test03</span>().test(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//假设方法中处理不了这个异常，方法上抛出异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException&#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();<span class="comment">//主动抛出异常  一般在方法中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>使用Java内置的异常可以描述在编程时出现的大部分异常情况，除此之外，还可以自定义异常，只需继承Exception类即可。</p><p>在程序中使用自定义异常，大体分为以下步骤：</p><p> 1.创建自定义有效类。</p><p> 2.在方法中通过throw关键字抛出异常。</p><p> 3.如果在当前抛出异常的方法中处理异常，可以使用try-catch捕获并处理，否则在方法的声明处通过throws关键字指明要抛出给方法调 用者的异常，进行下一步操作。</p><p> 4.在出现异常方法的调用者中捕获并处理异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.exception;</span><br><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExcepyion</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="comment">//传递数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> detail;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyExcepyion</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//toString 异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyExcepyion&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;detail=&quot;</span> + detail +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.exception;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">    <span class="comment">//可能在异常的方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> MyExcepyion &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为：&quot;</span>+a);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyExcepyion</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyExcepyion e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyException--&gt;&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JAVA基础的学习；</summary>
    
    
    
    <category term="JavaSE" scheme="http://xuzb0312.github.io/categories/JavaSE/"/>
    
    
    <category term="java" scheme="http://xuzb0312.github.io/tags/java/"/>
    
    <category term="javase基础" scheme="http://xuzb0312.github.io/tags/javase%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java基础（集合框架）</title>
    <link href="http://xuzb0312.github.io/2022/03/26/%E9%9B%86%E5%90%88/"/>
    <id>http://xuzb0312.github.io/2022/03/26/%E9%9B%86%E5%90%88/</id>
    <published>2022-03-26T12:54:57.000Z</published>
    <updated>2022-03-26T09:09:08.398Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a><strong>集合概述</strong></h1><p>哈希表，增删改查在使用时，O（1）</p><hr><ul><li><strong>概念</strong>：对象的容器，定义了对多个对象进行操作的的常用方法。可实现数组的功能。</li><li><strong>和数组的区别</strong>：</li></ul><ol><li>数组长度固定，集合长度不固定。</li><li>数组可以存储基本类型和引用类型，集合只能存储引用类型（可以对基本类型进行装箱操作）。</li></ol><ul><li><strong>位置</strong>： java.util.*;</li></ul><h2 id="Collection体系集合"><a href="#Collection体系集合" class="headerlink" title="Collection体系集合"></a><strong>Collection体系集合</strong></h2><hr><p><img src="/2022/03/26/%E9%9B%86%E5%90%88/5f9912e21cd1bbb86b6c3035.png" alt="img"></p><h3 id="Collection父接口"><a href="#Collection父接口" class="headerlink" title="Collection父接口"></a><strong>Collection父接口</strong></h3><hr><ul><li><p><strong>特点</strong>：代表一组任意类型的对象，无序、无下标、不能重复。</p></li><li><p><strong>方法</strong>：</p><ul><li><code>boolean add(Object obj) //添加一个对象。</code></li><li><code>boolean addAll(Collection c) //讲一个集合中的所有对象添加到此集合中。</code></li><li><code>void clear() //清空此集合中的所有对象。</code></li><li><code>boolean contains(Object o) //检查此集合中是否包含o对象。</code></li><li><code>boolean equals(Object o) //比较此集合是否与指定对象相等。</code></li><li><code>boolean isEmpty() //判断此集合是否为空。</code></li><li><code>boolean remove(Object o) //在此集合中移除o对象。</code></li><li><code>int size() //返回此集合中的元素个数。</code></li><li><code>Object[] toArray() //姜此集合转换成数组。</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">COPY<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collection接口的使用（一）</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历元素</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span>&#123;</span><br><span class="line">    pubic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        Collection collection=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();        </span><br><span class="line"><span class="comment">//      * 1.添加元素</span></span><br><span class="line">        Collection.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        Collection.add(<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line">        Collection.add(<span class="string">&quot;榴莲&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+collection.size());</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"><span class="comment">//      * 2.删除元素</span></span><br><span class="line">        collection.remove(<span class="string">&quot;榴莲&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除之后：&quot;</span>+collection.size());</span><br><span class="line"><span class="comment">//      * 3.遍历元素</span></span><br><span class="line">        <span class="comment">//3.1 使用增强for </span></span><br><span class="line">        <span class="keyword">for</span>(Object object : collection)&#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2 使用迭代器（迭代器专门用来遍历集合的一种方式）</span></span><br><span class="line">        <span class="comment">//hasnext();判断是否有下一个元素</span></span><br><span class="line">        <span class="comment">//next();获取下一个元素</span></span><br><span class="line">        <span class="comment">//remove();删除当前元素</span></span><br><span class="line">        Iterator iterator=collection.Itertor();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasnext())&#123;</span><br><span class="line">            String s=(String)iterator.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            <span class="comment">//删除操作</span></span><br><span class="line">            <span class="comment">//collection.remove(s);引发错误：并发修改异常</span></span><br><span class="line">            <span class="comment">//iterator.remove();应使用迭代器的方法</span></span><br><span class="line"><span class="comment">//      * 4.判断</span></span><br><span class="line">        System.out.println(collection.contains(<span class="string">&quot;西瓜&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(collection.isEmpty());<span class="comment">//false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">COPY<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collection接口的使用（二）</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历元素</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Collection collection=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Student s3=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="comment">//1.添加数据</span></span><br><span class="line">collection.add(s1);</span><br><span class="line">collection.add(s2);</span><br><span class="line">collection.add(s3);</span><br><span class="line"><span class="comment">//collection.add(s3);可重复添加相同对象</span></span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span>+collection.size());</span><br><span class="line">System.out.println(collection.toString());</span><br><span class="line"><span class="comment">//2.删除数据</span></span><br><span class="line">collection.remove(s1);</span><br><span class="line">System.out.println(<span class="string">&quot;删除之后：&quot;</span>+collection.size());</span><br><span class="line"><span class="comment">//3.遍历数据</span></span><br><span class="line"><span class="comment">//3.1 增强for</span></span><br><span class="line"><span class="keyword">for</span>(Object object:collection) &#123;</span><br><span class="line">Student student=(Student) object;</span><br><span class="line">System.out.println(student.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.2迭代器</span></span><br><span class="line"><span class="comment">//迭代过程中不能使用collection的删除方法</span></span><br><span class="line">Iterator iterator=collection.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">Student student=(Student) iterator.next();</span><br><span class="line">System.out.println(student.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.判断和上一块代码类似。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">COPY<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Student [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age +<span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Collection子接口"><a href="#Collection子接口" class="headerlink" title="Collection子接口"></a><strong>Collection子接口</strong></h3><hr><h4 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a><strong>List集合</strong></h4><ul><li><p><strong>特点</strong>：有序、有下标、元素可以重复。</p></li><li><p><strong>方法</strong>：</p><ul><li><code>void add(int index,Object o) //在index位置插入对象o。</code></li><li><code>boolean addAll(index,Collection c) //将一个集合中的元素添加到此集合中的index位置。</code></li><li><code>Object get(int index) //返回集合中指定位置的元素。</code></li><li><code>List subList(int fromIndex,int toIndex) //返回fromIndex和toIndex之间的集合元素。</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">COPY<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List子接口的使用（一）</span></span><br><span class="line"><span class="comment"> * 特点：1.有序有下标 2.可以重复</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历元素</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> * 5.获取位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">List list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//1.添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;tang&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">list.add(<span class="number">0</span>,<span class="string">&quot;yu&quot;</span>);<span class="comment">//插入操作</span></span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span>+list.size());</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line"><span class="comment">//2.删除元素</span></span><br><span class="line">list.remove(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//list.remove(&quot;yu&quot;);结果同上</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除之后：&quot;</span>+list.size());</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line"><span class="comment">//3.遍历元素</span></span><br><span class="line"><span class="comment">//3.1 使用for遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();++i) &#123;</span><br><span class="line">System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.2 使用增强for</span></span><br><span class="line"><span class="keyword">for</span>(Object object:list) &#123;</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.3 使用迭代器</span></span><br><span class="line">Iterator iterator=list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.4使用列表迭代器，listIterator可以双向遍历，添加、删除及修改元素。</span></span><br><span class="line">ListIterator listIterator=list.listIterator();</span><br><span class="line"><span class="comment">//从前往后</span></span><br><span class="line"><span class="keyword">while</span> (listIterator.hasNext()) &#123;</span><br><span class="line">System.out.println(listIterator.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从后往前（此时“遍历指针”已经指向末尾）</span></span><br><span class="line"><span class="keyword">while</span>(listIterator.hasPrevious()) &#123;</span><br><span class="line">System.out.println(listIterator.previous());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.判断</span></span><br><span class="line">System.out.println(list.isEmpty());</span><br><span class="line">System.out.println(list.contains(<span class="string">&quot;tang&quot;</span>));</span><br><span class="line"><span class="comment">//5.获取位置</span></span><br><span class="line">System.out.println(list.indexOf(<span class="string">&quot;tang&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">COPY<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List子接口的使用（二）</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历元素</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> * 5.获取位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">List list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">//1.添加数字数据（自动装箱）</span></span><br><span class="line">list.add(<span class="number">20</span>);</span><br><span class="line">list.add(<span class="number">30</span>);</span><br><span class="line">list.add(<span class="number">40</span>);</span><br><span class="line">list.add(<span class="number">50</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span>+list.size());</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line"><span class="comment">//2.删除元素</span></span><br><span class="line">list.remove(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//list.remove(20);很明显数组越界错误，改成如下</span></span><br><span class="line"><span class="comment">//list.remove(Object(20));</span></span><br><span class="line"><span class="comment">//list.remove(new Integer(20));</span></span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span>+list.size());</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line"><span class="comment">//3-5不再演示，与之前类似</span></span><br><span class="line"><span class="comment">//6.补充方法subList，返回子集合，含头不含尾</span></span><br><span class="line">List list2=list.subList(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(list2.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="List实现类"><a href="#List实现类" class="headerlink" title="List实现类"></a><strong>List实现类</strong></h4><h5 id="ArrayList【重点】"><a href="#ArrayList【重点】" class="headerlink" title="ArrayList【重点】"></a><strong>ArrayList【重点】</strong></h5><ul><li>数组结构实现，查询块、增删慢；</li><li>JDK1.2版本，运行效率快、线程不安全。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ArrayList的使用</span></span><br><span class="line"><span class="comment"> * 存储结构：数组；</span></span><br><span class="line"><span class="comment"> * 特点：查找遍历速度快，增删慢。</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历元素</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> * 5.查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">ArrayList arrayList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//1.添加元素</span></span><br><span class="line">Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;唐&quot;</span>, <span class="number">21</span>);</span><br><span class="line">Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;何&quot;</span>, <span class="number">22</span>);</span><br><span class="line">Student s3=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;余&quot;</span>, <span class="number">21</span>);</span><br><span class="line">arrayList.add(s1);</span><br><span class="line">arrayList.add(s2);</span><br><span class="line">arrayList.add(s3);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span>+arrayList.size());</span><br><span class="line">System.out.println(arrayList.toString());</span><br><span class="line"><span class="comment">//2.删除元素</span></span><br><span class="line">arrayList.remove(s1);</span><br><span class="line"><span class="comment">//arrayList.remove(new Student(&quot;唐&quot;, 21));</span></span><br><span class="line"><span class="comment">//注：这样可以删除吗（不可以）？显然这是两个不同的对象。</span></span><br><span class="line"><span class="comment">//假如两个对象属性相同便认为其是同一对象，那么如何修改代码？</span></span><br><span class="line"><span class="comment">//3.遍历元素</span></span><br><span class="line"><span class="comment">//3.1使用迭代器</span></span><br><span class="line">Iterator iterator=arrayList.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.2使用列表迭代器</span></span><br><span class="line">ListIterator listIterator=arrayList.listIterator();</span><br><span class="line"><span class="comment">//从前往后遍历</span></span><br><span class="line"><span class="keyword">while</span>(listIterator.hasNext()) &#123;</span><br><span class="line">System.out.println(listIterator.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从后往前遍历</span></span><br><span class="line"><span class="keyword">while</span>(listIterator.hasPrevious()) &#123;</span><br><span class="line">System.out.println(listIterator.previous());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.判断</span></span><br><span class="line">System.out.println(arrayList.isEmpty());</span><br><span class="line"><span class="comment">//System.out.println(arrayList.contains(new Student(&quot;何&quot;, 22)));</span></span><br><span class="line"><span class="comment">//注：与上文相同的问题。</span></span><br><span class="line"><span class="comment">//5.查找</span></span><br><span class="line">System.out.println(arrayList.indexOf(s1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：Object里的equals(this&#x3D;&#x3D;obj)用地址和当前对象比较，如果想实现代码中的问题，可以在学生类中重写equals方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="comment">//1.是否为同一对象</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>==obj) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.判断是否为空</span></span><br><span class="line"><span class="keyword">if</span> (obj==<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.判断是否是Student类型</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">Student student=(Student) obj;</span><br><span class="line"><span class="comment">//4.比较属性</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.name.equals(student.getName())&amp;&amp;<span class="built_in">this</span>.age==student.age) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不满足，返回false</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a><strong>ArrayList源码分析</strong></h5><ul><li><p>默认容量大小：<code>private static final int DEFAULT_CAPACITY = 10;</code>需要注意的是，这是添加元素之后默认容量是10，没有添加元素的话，容量为0</p></li><li><p>存放元素的数组：<code>transient Object[] elementData;</code></p></li><li><p>实际元素个数：<code>private int size;</code></p></li><li><p>创建对象时调用的无参构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个空的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段源码说明当你没有向集合中添加任何元素时，集合容量为0。那么默认的10个容量怎么来的呢？</p><p>这就得看看add方法的源码了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设你new了一个数组，当前容量为0，size当然也为0。这时调用add方法进入到<code>ensureCapacityInternal(size + 1);</code>该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法中的参数minCapacity传入的值为size+1也就是 1，接着我们再进入到<code>calculateCapacity(elementData, minCapacity)</code>里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文说过，elementData就是存放元素的数组，当前容量为0，if条件成立，返回默认容量<code>DEFAULT_CAPACITY</code>也就是10。这个值作为参数又传入<code>ensureExplicitCapacity()</code>方法中，进入该方法查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>我们先不要管modCount这个变量。</del></p><p>因为elementData数组长度为0，所以if条件成立，调用grow方法，<strong>重要的部分来了</strong>，我们再次进入到grow方法的源码中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法先声明了一个oldCapacity变量将数组长度赋给它，其值为0；又声明了一个newCapacity变量其值为<code>oldCapacity+一个增量</code>，可以发现这个增量是和原数组长度有关的量，当然在这里也为0。第一个if条件满足，newCapacity的值为10（这就是默认的容量，不理解的话再看看前面）。第二个if条件不成立，也可以不用注意，因为MAX_ARRAY_SIZE的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>这个值太大了以至于第二个if条件没有了解的必要。</p><p>最后一句话就是为elementData数组赋予了新的长度，<code>Arrays.copyOf()</code>方法返回的数组是新的数组对象，原数组对象不会改变，该拷贝不会影响原来的数组。<code>copyOf()</code>的第二个自变量指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值。</p><p>这时候再回到add的方法中，接着就向下执行<code>elementData[size++] = e;</code>到这里为止关于ArrayList就讲解得差不多了，当数组长度为10的时候你们可以试着过一下源码，查一下每次的增量是多少（答案是每次扩容为原来的1.5倍）。</p><hr></li></ul><h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><strong>Vector</strong></h5><ul><li><p>数组结构实现，查询快、增删慢；</p></li><li><p>JDK1.0版本，运行效率慢、线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Vector的演示使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *1.添加数据</span></span><br><span class="line"><span class="comment"> *2.删除数据</span></span><br><span class="line"><span class="comment"> *3.遍历</span></span><br><span class="line"><span class="comment"> *4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Vector vector=<span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//1.添加数据</span></span><br><span class="line">vector.add(<span class="string">&quot;tang&quot;</span>);</span><br><span class="line">vector.add(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">vector.add(<span class="string">&quot;yu&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span>+vector.size());</span><br><span class="line"><span class="comment">//2.删除数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * vector.remove(0); vector.remove(&quot;tang&quot;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//3.遍历</span></span><br><span class="line"><span class="comment">//使用枚举器</span></span><br><span class="line">Enumeration enumeration=vector.elements();</span><br><span class="line"><span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String) enumeration.nextElement();</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.判断</span></span><br><span class="line">System.out.println(vector.isEmpty());</span><br><span class="line">System.out.println(vector.contains(<span class="string">&quot;he&quot;</span>));</span><br><span class="line"><span class="comment">//5. Vector其他方法</span></span><br><span class="line"><span class="comment">//firstElement()  lastElement()  ElementAt();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><strong>LinkedList</strong></h5><ul><li>链表结构实现，增删快，查询慢。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LinkedList的用法</span></span><br><span class="line"><span class="comment"> * 存储结构：双向链表</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">LinkedList linkedList=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;唐&quot;</span>, <span class="number">21</span>);</span><br><span class="line">Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;何&quot;</span>, <span class="number">22</span>);</span><br><span class="line">Student s3=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;余&quot;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="comment">//1.添加元素</span></span><br><span class="line">linkedList.add(s1);</span><br><span class="line">linkedList.add(s2);</span><br><span class="line">linkedList.add(s3);</span><br><span class="line">linkedList.add(s3);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span>+linkedList.size());</span><br><span class="line">System.out.println(linkedList.toString());</span><br><span class="line"><span class="comment">//2.删除元素</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * linkedList.remove(new Student(&quot;唐&quot;, 21));</span></span><br><span class="line"><span class="comment"> * System.out.println(linkedList.toString());</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//3.遍历</span></span><br><span class="line"><span class="comment">//3.1 使用for</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;linkedList.size();++i) &#123;</span><br><span class="line">System.out.println(linkedList.get(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.2 使用增强for</span></span><br><span class="line"><span class="keyword">for</span>(Object object:linkedList) &#123;</span><br><span class="line">Student student=(Student) object;</span><br><span class="line">System.out.println(student.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.3 使用迭代器</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span>linkedList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) iterator.next();</span><br><span class="line">System.out.println(student.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.4 使用列表迭代器（略）</span></span><br><span class="line"><span class="comment">//4. 判断</span></span><br><span class="line">System.out.println(linkedList.contains(s1));</span><br><span class="line">System.out.println(linkedList.isEmpty());</span><br><span class="line">System.out.println(linkedList.indexOf(s3));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a><strong>LinkedList源码分析</strong></h5><p>LinkedList首先有三个属性：</p><ul><li>链表大小：<code>transient int size = 0;</code></li><li>（指向）第一个结点&#x2F;头结点：<code> transient Node&lt;E&gt; first;</code></li><li>（指向）最后一个结点&#x2F;尾结点：<code>transient Node&lt;E&gt; last;</code></li></ul><p>关于Node类型我们再进入到类里看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先item存放的是实际数据；next指向下一个结点而prev指向上一个结点。</p><p>Node带参构造方法的三个参数分别是前一个结点、存储的数据、后一个结点，调用这个构造方法时将它们赋值给当前对象。</p><p>LinkedList是如何添加元素的呢？先看看add方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到linkLast方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设刚开始new了一个LinkedList对象，first和last属性都为空，调用add进入到linkLast方法。</p><p>首先创建一个Node变量 l 将last（此时为空）赋给它，然后new一个newNode变量存储数据，并且它的前驱指向l，后继指向null；再把last指向newNode。如下图所示：</p><p><img src="/2022/03/26/%E9%9B%86%E5%90%88/5f9a62a01cd1bbb86bc58487.png" alt="img"></p><p>如果满足if条件，说明这是添加的第一个结点，将first指向newNode：</p><p><img src="/2022/03/26/%E9%9B%86%E5%90%88/5f9a631c1cd1bbb86bc59ca6.png" alt="img"></p><p>至此，LinkedList对象的第一个数据添加完毕。假设需要再添加一个数据，我们可以再来走一遍，过程同上不再赘述，图示如下：</p><p><img src="/2022/03/26/%E9%9B%86%E5%90%88/5f9a680e1cd1bbb86bc681f6.png" alt="img"></p><hr><h5 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a><strong>ArrayList和LinkedList区别</strong></h5><ul><li>ArrayList：必须开辟连续空间，查询快，增删慢。</li><li>LinkedList：无需开辟连续空间，查询慢，增删快。</li></ul><p><img src="/2022/03/26/%E9%9B%86%E5%90%88/5f9a6b371cd1bbb86bc74cda.png" alt="img"></p><hr><h4 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a><strong>泛型概述</strong></h4><ul><li>Java泛型是JDK1.5中引入的一个新特性，其本质是参数化类型，把类型作为参数传递。</li><li>常见形式有泛型类、泛型接口、泛型方法。</li><li>语法：<ul><li>&lt;T,…&gt; T称为类型占位符，表示一种引用类型。</li></ul></li><li>好处：<ul><li>提高代码的重用性。</li><li>防止类型转换异常，提高代码的安全性。</li></ul></li></ul><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a><strong>泛型类</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型类</span></span><br><span class="line"><span class="comment"> * 语法：类名&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * T是类型占位符，表示一种引用类型，编写多个使用逗号隔开</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myGeneric</span>&lt;T&gt;&#123;</span><br><span class="line"><span class="comment">//1.创建泛型变量</span></span><br><span class="line"><span class="comment">//不能使用new来创建，因为泛型是不确定的类型，也可能拥有私密的构造方法。</span></span><br><span class="line">T t;</span><br><span class="line"><span class="comment">//2.泛型作为方法的参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span> &#123;</span><br><span class="line">System.out.println(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型作为方法的返回值</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> * 1.泛型只能使用引用类型</span></span><br><span class="line"><span class="comment"> * 2.不同泛型类型的对象不能相互赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testGeneric</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//使用泛型类创建对象</span></span><br><span class="line">myGeneric&lt;String&gt; myGeneric1=<span class="keyword">new</span> <span class="title class_">myGeneric</span>&lt;String&gt;();</span><br><span class="line">myGeneric1.t=<span class="string">&quot;tang&quot;</span>;</span><br><span class="line">myGeneric1.show(<span class="string">&quot;he&quot;</span>);</span><br><span class="line"></span><br><span class="line">myGeneric&lt;Integer&gt; myGeneric2=<span class="keyword">new</span> <span class="title class_">myGeneric</span>&lt;Integer&gt;();</span><br><span class="line">myGeneric2.t=<span class="number">10</span>;</span><br><span class="line">myGeneric2.show(<span class="number">20</span>);</span><br><span class="line">Integer integer=myGeneric2.getT();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a><strong>泛型接口</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型接口</span></span><br><span class="line"><span class="comment"> * 语法：接口名&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * 注意：不能创建泛型静态常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">//创建常量</span></span><br><span class="line">String nameString=<span class="string">&quot;tang&quot;</span>;</span><br><span class="line">    </span><br><span class="line">T <span class="title function_">server</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口时确定泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span>&lt;String&gt;&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">server</span><span class="params">(String t)</span> &#123;</span><br><span class="line">System.out.println(t);</span><br><span class="line"><span class="keyword">return</span> t; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">MyInterfaceImpl myInterfaceImpl=<span class="keyword">new</span> <span class="title class_">MyInterfaceImpl</span>();</span><br><span class="line">myInterfaceImpl.server(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//xxx</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口时不确定泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceImpl2</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">MyInterface</span>&lt;T&gt;&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">server</span><span class="params">(T t)</span> &#123;</span><br><span class="line">System.out.println(t);</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">MyInterfaceImpl2&lt;Integer&gt; myInterfaceImpl2=<span class="keyword">new</span> <span class="title class_">MyInterfaceImpl2</span>&lt;Integer&gt;();</span><br><span class="line">myInterfaceImpl2.server(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//2000</span></span><br></pre></td></tr></table></figure><h5 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a><strong>泛型方法</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型方法</span></span><br><span class="line"><span class="comment"> * 语法：&lt;T&gt; 返回类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGenericMethod</span> &#123;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;泛型方法&quot;</span>+t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">MyGenericMethod myGenericMethod=<span class="keyword">new</span> <span class="title class_">MyGenericMethod</span>();</span><br><span class="line">myGenericMethod.show(<span class="string">&quot;tang&quot;</span>);</span><br><span class="line">myGenericMethod.show(<span class="number">200</span>);</span><br><span class="line">myGenericMethod.show(<span class="number">3.14</span>);</span><br></pre></td></tr></table></figure><h5 id="泛型集合"><a href="#泛型集合" class="headerlink" title="泛型集合"></a><strong>泛型集合</strong></h5><ul><li><p><strong>概念</strong>：参数化类型、类型安全的集合，强制集合元素的类型必须一致。</p></li><li><p>特点</p><p>：</p><ul><li>编译时即可检查，而非运行时抛出异常。</li><li>访问时，不必类型转换（拆箱）。</li><li>不同泛型指尖引用不能相互赋值，泛型不存在多态。</li></ul></li></ul><p>之前我们在创建LinkedList类型对象的时候并没有使用泛型，但是进到它的源码中会发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable&#123;<span class="comment">//略&#125;</span></span><br></pre></td></tr></table></figure><p>它是一个泛型类，而我之前使用的时候并没有传递，说明java语法是允许的，这个时候传递的类型是Object类，虽然它是所有类的父类，可以存储任意的类型，但是在遍历、获取元素时需要原来的类型就要进行强制转换。这个时候就会出现一些问题，假如往链表里存储了许多不同类型的数据，在强转的时候就要判断每一个原来的类型，这样就很容易出现错误。</p><hr><h4 id="Set集合概述"><a href="#Set集合概述" class="headerlink" title="Set集合概述"></a><strong>Set集合概述</strong></h4><h5 id="Set子接口"><a href="#Set子接口" class="headerlink" title="Set子接口"></a><strong>Set子接口</strong></h5><ul><li><strong>特点</strong>：无序、无下标、元素不可重复。</li><li><strong>方法</strong>：全部继承自Collection中的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Set接口的使用</span></span><br><span class="line"><span class="comment"> * 特点：1.无序，没有下标；2.不能重复</span></span><br><span class="line"><span class="comment"> * 1.添加数据</span></span><br><span class="line"><span class="comment"> * 2.删除数据</span></span><br><span class="line"><span class="comment"> * 3.遍历【重点】</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//1.添加数据</span></span><br><span class="line">set.add(<span class="string">&quot;tang&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;yu&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;数据个数：&quot;</span>+set.size());</span><br><span class="line">System.out.println(set.toString());<span class="comment">//无序输出</span></span><br><span class="line"><span class="comment">//2.删除数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * set.remove(&quot;tang&quot;); System.out.println(set.toString());</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//3.遍历【重点】</span></span><br><span class="line"><span class="comment">//3.1 使用增强for</span></span><br><span class="line"><span class="keyword">for</span> (String string : set) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.2 使用迭代器</span></span><br><span class="line">Iterator&lt;String&gt; iterator=set.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.判断</span></span><br><span class="line">System.out.println(set.contains(<span class="string">&quot;tang&quot;</span>));</span><br><span class="line">System.out.println(set.isEmpty());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set实现类"><a href="#Set实现类" class="headerlink" title="Set实现类"></a><strong>Set实现类</strong></h4><h5 id="HashSet【重点】"><a href="#HashSet【重点】" class="headerlink" title="HashSet【重点】"></a><strong>HashSet【重点】</strong></h5><ul><li>基于HashCode计算元素存放位置。</li><li>当存入元素的哈希码相同时，会调用equals进行确认，如结果为true，则拒绝后者存入。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Peerson [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HashSet集合的使用</span></span><br><span class="line"><span class="comment"> * 存储结构：哈希表（数组+链表+红黑树）</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashSet&lt;Person&gt; hashSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">Person p1=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tang&quot;</span>,<span class="number">21</span>);</span><br><span class="line">Person p2=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>);</span><br><span class="line">Person p3=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="comment">//1.添加元素</span></span><br><span class="line">hashSet.add(p1);</span><br><span class="line">hashSet.add(p2);</span><br><span class="line">hashSet.add(p3);</span><br><span class="line">        <span class="comment">//重复，添加失败</span></span><br><span class="line">        hashSet.add(p3);</span><br><span class="line">        <span class="comment">//直接new一个相同属性的对象，依然会被添加，不难理解。</span></span><br><span class="line">        <span class="comment">//假如相同属性便认为是同一个对象，怎么修改？</span></span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>));</span><br><span class="line">System.out.println(hashSet.toString());</span><br><span class="line"><span class="comment">//2.删除元素</span></span><br><span class="line">hashSet.remove(p2);</span><br><span class="line"><span class="comment">//3.遍历</span></span><br><span class="line"><span class="comment">//3.1 增强for</span></span><br><span class="line"><span class="keyword">for</span> (Person person : hashSet) &#123;</span><br><span class="line">System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.2 迭代器</span></span><br><span class="line">Iterator&lt;Person&gt; iterator=hashSet.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.判断</span></span><br><span class="line">System.out.println(hashSet.isEmpty());</span><br><span class="line">        <span class="comment">//直接new一个相同属性的对象结果输出是false，不难理解。</span></span><br><span class="line">        <span class="comment">//注：假如相同属性便认为是同一个对象，该怎么做？</span></span><br><span class="line">System.out.println(hashSet.contains(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tang&quot;</span>, <span class="number">21</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：hashSet存储过程：</p><ol><li>根据hashCode计算保存的位置，如果位置为空，则直接保存，否则执行第二步。</li><li>执行equals方法，如果方法返回true，则认为是重复，拒绝存储，否则形成链表。</li></ol><p>存储过程实际上就是重复依据，要实现“注”里的问题，可以重写hashCode和equals代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    result = prime * result + age;</span><br><span class="line">    result = prime * result + ((name == <span class="literal">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person)obj;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.name.equals(p.getName())&amp;&amp;<span class="built_in">this</span>.age==p.getAge())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hashCode方法里为什么要使用31这个数字大概有两个原因：</p><ol><li>31是一个质数，这样的数字在计算时可以尽量减少散列冲突。</li><li>可以提高执行效率，因为31*i&#x3D;(i&lt;&lt;5)-i，31乘以一个数可以转换成移位操作，这样能快一点；但是也有网上一些人对这两点提出质疑。</li></ol><hr><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><strong>TreeSet</strong></h5><ul><li>基于排序顺序实现不重复。</li><li>实现了SortedSet接口，对集合元素自动排序。</li><li>元素对象的类型必须实现Comparable接口，指定排序规则。</li><li>通过CompareTo方法确定是否为重复元素。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用TreeSet保存数据</span></span><br><span class="line"><span class="comment"> * 存储结构：红黑树</span></span><br><span class="line"><span class="comment"> * 要求：元素类必须实现Comparable接口，compareTo方法返回0，认为是重复元素 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">TreeSet&lt;Person&gt; persons=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Person&gt;();</span><br><span class="line">Person p1=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tang&quot;</span>,<span class="number">21</span>);</span><br><span class="line">Person p2=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>);</span><br><span class="line">Person p3=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="comment">//1.添加元素</span></span><br><span class="line">persons.add(p1);</span><br><span class="line">persons.add(p2);</span><br><span class="line">persons.add(p3);</span><br><span class="line"><span class="comment">//注：直接添加会报类型转换错误，需要实现Comparable接口</span></span><br><span class="line">System.out.println(persons.toString());</span><br><span class="line"><span class="comment">//2.删除元素</span></span><br><span class="line">persons.remove(p1);</span><br><span class="line">persons.remove(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>));</span><br><span class="line">System.out.println(persons.toString());</span><br><span class="line"><span class="comment">//3.遍历（略）</span></span><br><span class="line"><span class="comment">//4.判断</span></span><br><span class="line">System.out.println(persons.contains(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看Comparable接口的源码，发现只有一个compareTo抽象方法，在人类中实现它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="comment">//1.先按姓名比</span></span><br><span class="line"><span class="comment">//2.再按年龄比</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person o)</span> &#123;</span><br><span class="line"><span class="type">int</span> n1=<span class="built_in">this</span>.getName().compareTo(o.getName());</span><br><span class="line"><span class="type">int</span> n2=<span class="built_in">this</span>.age-o.getAge();</span><br><span class="line"><span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了实现Comparable接口里的比较方法，TreeSet也提供了一个带比较器Comparator的构造方法，使用匿名内部类来实现它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeSet的使用</span></span><br><span class="line"><span class="comment"> * Comparator：实现定制比较（比较器）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">TreeSet&lt;Person&gt; persons=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Person&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line"><span class="comment">// 先按年龄比较</span></span><br><span class="line"><span class="comment">// 再按姓名比较</span></span><br><span class="line"><span class="type">int</span> n1=o1.getAge()-o2.getAge();</span><br><span class="line"><span class="type">int</span> n2=o1.getName().compareTo(o2.getName());</span><br><span class="line"><span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Person p1=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tang&quot;</span>,<span class="number">21</span>);</span><br><span class="line">Person p2=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>);</span><br><span class="line">Person p3=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>);</span><br><span class="line">persons.add(p1);</span><br><span class="line">persons.add(p2);</span><br><span class="line">persons.add(p3);</span><br><span class="line">System.out.println(persons.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来做一个小案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要求：使用TreeSet集合实现字符串按照长度进行排序</span></span><br><span class="line"><span class="comment"> * helloworld tangrui hechengyang wangzixu yuguoming</span></span><br><span class="line"><span class="comment"> * Comparator接口实现定制比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">TreeSet&lt;String&gt; treeSet=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//先比较字符串长度</span></span><br><span class="line"><span class="comment">//再比较字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line"><span class="type">int</span> n1=o1.length()-o2.length();</span><br><span class="line"><span class="type">int</span> n2=o1.compareTo(o2);</span><br><span class="line"><span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">treeSet.add(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">treeSet.add(<span class="string">&quot;tangrui&quot;</span>);</span><br><span class="line">treeSet.add(<span class="string">&quot;hechenyang&quot;</span>);</span><br><span class="line">treeSet.add(<span class="string">&quot;yuguoming&quot;</span>);</span><br><span class="line">treeSet.add(<span class="string">&quot;wangzixu&quot;</span>);</span><br><span class="line">System.out.println(treeSet.toString());</span><br><span class="line">        <span class="comment">//输出[tangrui, wangzixu, yuguoming, hechenyang, helloworld]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Map体系集合</strong></p><ul><li><p>Map接口的特点：</p><ol><li>用于存储任意键值对(Key-Value)。</li><li>键：无序、无下标、不允许重复（唯一）。</li><li>值：无序、无下标、允许重复。</li></ol></li></ul><hr><h2 id="Map集合概述"><a href="#Map集合概述" class="headerlink" title="Map集合概述"></a><strong>Map集合概述</strong></h2><ul><li><p><strong>特点</strong>：存储一对数据（Key-Value），无序、无下标，键不可重复。</p></li><li><p><strong>方法</strong>：</p><ul><li><code>V put(K key,V value)</code>&#x2F;&#x2F;将对象存入到集合中，关联键值。key重复则覆盖原值。</li></ul></li><li><p><code>Object get(Object key)</code>&#x2F;&#x2F;根据键获取相应的值。</p><ul><li><code>Set&lt;K&gt;</code>&#x2F;&#x2F;返回所有的key</li><li><code>Collection&lt;V&gt; values()</code>&#x2F;&#x2F;返回包含所有值的Collection集合。</li><li><code>Set&lt;Map.Entry&lt;K,V&gt;&gt;</code>&#x2F;&#x2F;键值匹配的set集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Map接口的使用</span></span><br><span class="line"><span class="comment"> * 特点：1.存储键值对 2.键不能重复，值可以重复 3.无序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Map&lt;String,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line"><span class="comment">//1.添加元素</span></span><br><span class="line">map.put(<span class="string">&quot;tang&quot;</span>, <span class="number">21</span>);</span><br><span class="line">map.put(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>);</span><br><span class="line">map.put(<span class="string">&quot;fan&quot;</span>, <span class="number">23</span>);</span><br><span class="line">System.out.println(map.toString());</span><br><span class="line"><span class="comment">//2.删除元素</span></span><br><span class="line">map.remove(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">System.out.println(map.toString());</span><br><span class="line"><span class="comment">//3.遍历</span></span><br><span class="line"><span class="comment">//3.1 使用keySet();</span></span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">System.out.println(key+<span class="string">&quot; &quot;</span>+map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.2 使用entrySet();效率较高</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">System.out.println(entry.getKey()+<span class="string">&quot; &quot;</span>+entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Map集合的实现类"><a href="#Map集合的实现类" class="headerlink" title="Map集合的实现类"></a><strong>Map集合的实现类</strong></h3><h4 id="HashMap【重点】"><a href="#HashMap【重点】" class="headerlink" title="HashMap【重点】"></a><strong>HashMap【重点】</strong></h4><ul><li><p>JDK1.2版本，线程不安全，运行效率快；允许用null作为key或是value。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 学生类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">  <span class="built_in">super</span>();</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Student [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + id + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * HashMap的使用</span></span><br><span class="line"><span class="comment">   * 存储结构：哈希表（数组+链表+红黑树）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  HashMap&lt;Student, String&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Student, String&gt;();</span><br><span class="line">  Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tang&quot;</span>, <span class="number">36</span>);</span><br><span class="line">  Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">101</span>);</span><br><span class="line">  Student s3=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="comment">//1.添加元素</span></span><br><span class="line">  hashMap.put(s1, <span class="string">&quot;成都&quot;</span>);</span><br><span class="line">  hashMap.put(s2, <span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">  hashMap.put(s3, <span class="string">&quot;郑州&quot;</span>);</span><br><span class="line">  <span class="comment">//添加失败，但会更新值</span></span><br><span class="line">  hashMap.put(s3,<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">  <span class="comment">//添加成功，不过两个属性一模一样；</span></span><br><span class="line">  <span class="comment">//注：假如相同属性便认为是同一个对象，怎么修改？</span></span><br><span class="line">  hashMap.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>),<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">  System.out.println(hashMap.toString());</span><br><span class="line">  <span class="comment">//2.删除元素</span></span><br><span class="line">  hashMap.remove(s3);</span><br><span class="line">  System.out.println(hashMap.toString());</span><br><span class="line">  <span class="comment">//3.遍历</span></span><br><span class="line">  <span class="comment">//3.1 使用keySet()遍历</span></span><br><span class="line">  <span class="keyword">for</span> (Student key : hashMap.keySet()) &#123;</span><br><span class="line">  System.out.println(key+<span class="string">&quot; &quot;</span>+hashMap.get(key));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.2 使用entrySet()遍历</span></span><br><span class="line">  <span class="keyword">for</span> (Entry&lt;Student, String&gt; entry : hashMap.entrySet()) &#123;</span><br><span class="line">  System.out.println(entry.getKey()+<span class="string">&quot; &quot;</span>+entry.getValue());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//4.判断</span></span><br><span class="line">  <span class="comment">//注：同上</span></span><br><span class="line">  System.out.println(hashMap.containsKey(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>)));</span><br><span class="line">  System.out.println(hashMap.containsValue(<span class="string">&quot;成都&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注：和之前说过的HashSet类似，重复依据是hashCode和equals方法，重写即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      result = prime * result + id;</span><br><span class="line">      result = prime * result + ((name == <span class="literal">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">Student</span> <span class="variable">other</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">      <span class="keyword">if</span> (id != other.id)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (other.name != <span class="literal">null</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap源码分析"><a href="#HashMap源码分析" class="headerlink" title="HashMap源码分析"></a><strong>HashMap源码分析</strong></h4></li><li><p>默认初始化容量：<code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</code></p><ul><li>数组最大容量：<code>static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</code></li></ul></li><li><p>默认加载因子：<code>static final float DEFAULT_LOAD_FACTOR = 0.75f;</code></p></li><li><p>链表调整为红黑树的链表长度阈值（JDK1.8）：<code>static final int TREEIFY_THRESHOLD = 8;</code></p></li><li><p>红黑树调整为链表的链表长度阈值（JDK1.8）：<code>static final int UNTREEIFY_THRESHOLD = 6;</code></p></li><li><p>链表调整为红黑树的数组最小阈值（JDK1.8）：<code>static final int MIN_TREEIFY_CAPACITY = 64;</code></p></li><li><p>HashMap存储的数组：<code>transient Node&lt;K,V&gt;[] table;</code>默认为null</p></li><li><p>HashMap存储的元素个数：<code>transient int size;</code>默认为0</p><blockquote><ul><li>默认加载因子是什么？<ul><li>就是判断数组是否扩容的一个因子。假如数组容量为100，如果HashMap的存储元素个数超过了100*0.75&#x3D;75，那么就会进行扩容。</li></ul></li><li>链表调整为红黑树的链表长度阈值是什么？<ul><li>假设在数组中下标为3的位置已经存储了数据，当新增数据时通过哈希码得到的存储位置又是3，那么就会在该位置形成一个链表，当链表过长时就会转换成红黑树以提高执行效率，这个阈值就是链表转换成红黑树的最短链表长度；</li></ul></li><li>红黑树调整为链表的链表长度阈值是什么？<ul><li>当红黑树的元素个数小于该阈值时就会转换成链表。</li></ul></li><li>链表调整为红黑树的数组最小阈值是什么？<ul><li>并不是只要链表长度大于8就可以转换成红黑树，在前者条件成立的情况下，数组的容量必须大于等于64才会进行转换。</li></ul></li></ul></blockquote><p>HashMap的数组table存储的就是一个个的Node&lt;K,V&gt;类型，很清晰地看到有一对键值，还有一个指向next的指针（以下只截取了部分源码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">      <span class="keyword">final</span> K key;</span><br><span class="line">      V value;</span><br><span class="line">      Node&lt;K,V&gt; next;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>之前的代码中在new对象时调用的是HashMap的无参构造方法，进入到该构造方法的源码查看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>发现没什么内容，只是赋值了一个默认加载因子；而在上文我们观察到源码中table和size都没有赋予初始值，说明刚创建的HashMap对象没有分配容量，并不拥有默认的16个空间大小，这样做的目的是为了节约空间，此时table为null，size为0。</p><p>当我们往对象里添加元素时调用put方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>put方法把key和value传给了putVal，同时还传入了一个hash(Key)所返回的值，这是一个产生哈希值的方法，再进入到putVal方法（部分源码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面创建了一个tab数组和一个Node变量p，第一个if实际是判断table是否为空，而我们现在只关注刚创建HashMap对象时的状态，此时tab和table都为空，满足条件，执行内部代码，这条代码其实就是把resize()所返回的结果赋给tab，n就是tab的长度，resize顾名思义就是重新调整大小。查看resize()源码（部分）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法首先把table及其长度赋值给oldTab和oldCap；threshold是阈值的意思，此时为0，所以前两个if先不管，最后else里newCap的值为默认初始化容量16；往下创建了一个newCap大小的数组并将其赋给了table，刚创建的HashMap对象就在这里获得了初始容量。然后我们再回到putVal方法，第二个if就是根据哈希码得到的tab中的一个位置是否为空，为空便直接添加元素，此时数组中无元素所以直接添加。至此HashMap对象就完成了第一个元素的添加。当添加的元素超过16*0.75&#x3D;12时，就会进行扩容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩容的代码如下（部分）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> newCap;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="comment">//略&#125;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>核心部分是else if里的移位操作，<strong>也就是说每次扩容都是原来大小的两倍</strong>。</p></li><li><p><strong>注</strong>：额外说明的一点是在JDK1.8以前链表是头插入，JDK1.8以后链表是尾插入。</p></li></ul><hr><h4 id="HashSet源码分析"><a href="#HashSet源码分析" class="headerlink" title="HashSet源码分析"></a><strong>HashSet源码分析</strong></h4><p>了解完HashMap之后，再回过头来看之前的HashSet源码，为什么放在后面写你们看一下源码就知道了（部分）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见HashSet的存储结构就是HashMap，那它的存储方式是怎样的呢？可以看一下add方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明了地发现它的add方法调用的就是map的put方法，把元素作为map的key传进去的。。</p><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a><strong>Hashtable</strong></h4><ul><li><p>JDK1.0版本，线程安全，运行效率慢；不允许null作为key或是value。</p></li><li><p>初始容量11，加载因子0.75。</p><p>这个集合在开发过程中已经不用了，稍微了解即可。</p></li></ul><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a><strong>Properties</strong></h4><ul><li>Hashtable的子类，要求key和value都是String。通常用于配置文件的读取。</li></ul><p>它继承了Hashtable的方法，与流关系密切，此处不详解。</p><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><strong>TreeMap</strong></h4><ul><li>实现了SortedMap接口（是Map的子接口），可以对key自动排序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeMap的使用</span></span><br><span class="line"><span class="comment"> * 存储结构：红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">TreeMap&lt;Student, Integer&gt; treeMap=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;Student, Integer&gt;();</span><br><span class="line">Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tang&quot;</span>, <span class="number">36</span>);</span><br><span class="line">Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;yu&quot;</span>, <span class="number">101</span>);</span><br><span class="line">Student s3=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//1.添加元素</span></span><br><span class="line">treeMap.put(s1, <span class="number">21</span>);</span><br><span class="line">treeMap.put(s2, <span class="number">22</span>);</span><br><span class="line">treeMap.put(s3, <span class="number">21</span>);</span><br><span class="line"><span class="comment">//不能直接打印，需要实现Comparable接口，因为红黑树需要比较大小</span></span><br><span class="line">System.out.println(treeMap.toString());</span><br><span class="line"><span class="comment">//2.删除元素</span></span><br><span class="line">treeMap.remove(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>));</span><br><span class="line">System.out.println(treeMap.toString());</span><br><span class="line"><span class="comment">//3.遍历</span></span><br><span class="line"><span class="comment">//3.1 使用keySet()</span></span><br><span class="line"><span class="keyword">for</span> (Student key : treeMap.keySet()) &#123;</span><br><span class="line">System.out.println(key+<span class="string">&quot; &quot;</span>+treeMap.get(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.2 使用entrySet()</span></span><br><span class="line"><span class="keyword">for</span> (Entry&lt;Student, Integer&gt; entry : treeMap.entrySet()) &#123;</span><br><span class="line">System.out.println(entry.getKey()+<span class="string">&quot; &quot;</span>+entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.判断</span></span><br><span class="line">System.out.println(treeMap.containsKey(s1));</span><br><span class="line">System.out.println(treeMap.isEmpty());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在学生类中实现Comparable接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=<span class="built_in">this</span>.id-o.id;</span><br><span class="line">        <span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外还可以使用比较器来定制比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Student, Integer&gt; treeMap2=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;Student, Integer&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="TreeSet源码"><a href="#TreeSet源码" class="headerlink" title="TreeSet源码"></a><strong>TreeSet源码</strong></h4><p>和HashSet类似，放在TreeMap之后讲便一目了然（部分）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">NavigableSet</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeSet的存储结构实际上就是TreeMap，再来看其存储方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的add方法调用的就是TreeMap的put方法，将元素作为key传入到存储结构中。</p><hr><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a><strong>Collections工具类</strong></h2><ul><li><p><strong>概念</strong>：集合工具类，定义了除了存取以外的集合常用方法。</p></li><li><p><strong>方法</strong>：</p><ul><li><code>public static void reverse(List&lt;?&gt; list)</code>&#x2F;&#x2F;反转集合中元素的顺序</li><li><code>public static void shuffle(List&lt;?&gt; list)</code>&#x2F;&#x2F;随机重置集合元素的顺序</li><li><code>public static void sort(List&lt;T&gt; list)</code>&#x2F;&#x2F;升序排序（元素类型必须实现Comparable接口）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示Collections工具类的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">20</span>);</span><br><span class="line">list.add(<span class="number">10</span>);</span><br><span class="line">list.add(<span class="number">30</span>);</span><br><span class="line">list.add(<span class="number">90</span>);</span><br><span class="line">list.add(<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort排序</span></span><br><span class="line">System.out.println(list.toString());</span><br><span class="line">Collections.sort(list);</span><br><span class="line">System.out.println(list.toString());</span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//binarySearch二分查找</span></span><br><span class="line"><span class="type">int</span> i=Collections.binarySearch(list, <span class="number">10</span>);</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy复制</span></span><br><span class="line">List&lt;Integer&gt; list2=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i1=<span class="number">0</span>;i1&lt;<span class="number">5</span>;++i1) &#123;</span><br><span class="line">list2.add(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该方法要求目标元素容量大于等于源目标</span></span><br><span class="line">Collections.copy(list2, list);</span><br><span class="line">System.out.println(list2.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//reserve反转</span></span><br><span class="line">Collections.reverse(list2);</span><br><span class="line">System.out.println(list2.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//shuffle 打乱</span></span><br><span class="line">Collections.shuffle(list2);</span><br><span class="line">System.out.println(list2.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//补充：list转成数组</span></span><br><span class="line">Integer[] arr=list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr.length);</span><br><span class="line"><span class="comment">//补充：数组转成集合 </span></span><br><span class="line">String[] nameStrings= &#123;<span class="string">&quot;tang&quot;</span>,<span class="string">&quot;he&quot;</span>,<span class="string">&quot;yu&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//受限集合，不能添加和删除</span></span><br><span class="line">List&lt;String&gt; list3=Arrays.asList(nameStrings);</span><br><span class="line">System.out.println(list3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：基本类型转成集合时需要修改为包装类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>HashSet、HashMap是用hashcode与equals进行比较是否重复。</p><p>TreeSet、TreeMap是实现Comparable接口下的CompareTo方法，或者实现Conparetor匿名内部类</p>]]></content>
    
    
    <summary type="html">java基础部分，很重要，List、set、map；</summary>
    
    
    
    <category term="java基础" scheme="http://xuzb0312.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://xuzb0312.github.io/tags/java/"/>
    
    <category term="集合框架" scheme="http://xuzb0312.github.io/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
    <category term="javase" scheme="http://xuzb0312.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>双指针（力扣算法题）</title>
    <link href="http://xuzb0312.github.io/2022/03/04/%E6%95%B0%E7%BB%84_%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>http://xuzb0312.github.io/2022/03/04/%E6%95%B0%E7%BB%84_%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2022-03-04T12:54:57.000Z</published>
    <updated>2022-03-04T13:10:32.528Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27 移除元素"></a>27 移除元素</h3><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>思想还是双指针算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">                nums[low]=nums[fast];</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h3><p>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。</p><p>思路：</p><p>思路：理解题意，如果1和3不相等，就把3放到2。快慢指针，不占用新空间，相当于创建一个新数组，不相等就放进去，相等就跳过。最后返回新数组的长度，需要注意，最后返回的是下标，需要加一才是长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;i&lt;nums.length;i++)&#123;<span class="comment">//把j看成一个新数组就可以新数组第一个一定不会重复不用考虑，从第二个开始</span></span><br><span class="line">            <span class="keyword">if</span>(nums[j]!=nums[i])&#123;<span class="comment">//要是i等于j这个数组前一个元素，就不把它放进来</span></span><br><span class="line"></span><br><span class="line">                nums[++j]=nums[i];<span class="comment">//不相等时就把i这个元素放到j这个数组的下一个元素里面</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//j代表下标，j+1，代表长度。</span></span><br><span class="line">        <span class="keyword">return</span> ++j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283 移动零"></a>283 移动零</h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>和删除元素差不多，将最后的那些元素全部赋值为0即可。</p><p>思路</p><p>与删除元素几乎一样，只不过最后多了一步将剩余的数组变成0，双指针法创造一个新的数组，需要注意的是，在跳出循环前，慢指针以及进行+1，现在指向的是需要变成0的那个index，不需要再进行+1了，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[low++]=nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>low;i&lt;nums.length;i++)&#123;</span><br><span class="line">            nums[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="977-有序数组的平方（双指针）"><a href="#977-有序数组的平方（双指针）" class="headerlink" title="977 有序数组的平方（双指针）"></a>977 有序数组的平方（双指针）</h3><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><p>示例 1： 输入：nums &#x3D; [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]</p><p>示例 2： 输入：nums &#x3D; [-7,-3,2,3,11] 输出：[4,9,9,49,121]</p><p><strong>解题思路：</strong></p><p>此时可以考虑双指针法了，i指向起始位置，j指向终止位置。</p><p>定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。</p><p>如果<code>A[i] * A[i] &lt; A[j] * A[j]</code> 那么<code>result[k--] = A[j] * A[j];</code> 。</p><p>如果<code>A[i] * A[i] &gt;= A[j] * A[j]</code> 那么<code>result[k--] = A[i] * A[i];</code> 。</p><p><img src="/2022/03/04/%E6%95%B0%E7%BB%84_%E5%8F%8C%E6%8C%87%E9%92%88/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;<span class="comment">//双指针法，从两端开始。</span></span><br><span class="line">        <span class="type">int</span> [] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];<span class="comment">//新建一个数组，来放置排序后的数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> result.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>( nums[left]*nums[left] &lt; nums[right]*nums[right]) &#123;</span><br><span class="line">                result[index--] = nums[right] * nums[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result[index--] = nums[left] * nums[left];</span><br><span class="line">                left++;<span class="comment">//++j与j++在这里都可以。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">（打卡Day02） 对双指针这个算法的理解，移除元素，以及最后到底是返回r还是l；</summary>
    
    
    
    <category term="算法" scheme="http://xuzb0312.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://xuzb0312.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="双指针" scheme="http://xuzb0312.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="算法打卡" scheme="http://xuzb0312.github.io/tags/%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>二分查找（力扣算法题）</title>
    <link href="http://xuzb0312.github.io/2022/03/04/%E6%95%B0%E7%BB%84_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://xuzb0312.github.io/2022/03/04/%E6%95%B0%E7%BB%84_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</id>
    <published>2022-03-04T12:54:57.000Z</published>
    <updated>2022-03-04T13:07:25.420Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p><strong>时间复杂度：</strong>O(\log x)O(logx)，每一次搜索的区间大小约为原来的 1&#x2F;2，时间复杂度为 O(\log_2 x) &#x3D; O(\log x)O(log 2x)&#x3D;O(logx)；<br><strong>空间复杂度</strong>：O(1)O(1)。</p><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h3><p>在什么条件下可以使用二分查找呢？</p><p>只要看到给出的数组是<strong>有序数组</strong>、就可以尝试使用二分查找。</p><p>主要注意的是还需要一个条件，<strong>数组无重复</strong>，因为一旦有重复的元素，使用二分查找返回的元素下标不是唯一的。</p><p>二分查找最需要注意的就是——-区间问题。</p><p>例如到底是 <code>while(left &lt; right)</code> 还是 <code>while(left &lt;= right)</code>，到底是<code>right = middle</code>呢，还是要<code>right = middle - 1</code>呢？</p><p>【】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用while(left &lt; right)的时候，最后还要单独再判断一次 nums[left] 和target 相不相等。为什么？</p><p>举个例子， 输入数组为 [2, 5]， target &#x3D; 5 如果不判断，第一次循环后， left &#x3D;&#x3D; right， 他就跳出循环了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">//简单的二分查找</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//小知识点： java数组的最大长度为int的最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (target == nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时left = right</span></span><br><span class="line">        <span class="keyword">return</span> target &lt;= nums[left] ? left : left + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//在只有一个元素的时候会出现=</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为什么没有找到target返回left？？</p><p>注意：以下讨论的是<code>没有</code>找到target</p><p>很容易想象，经过每次while循环，都会使得<code>[left,right]</code>的左闭右闭区间中的元素减少。</p><p>那就有一个问题，减少到最后会是什么情况？</p><p>那就是进入最后一次while循环前，[left,right]的左闭右闭区间中只有一个或者两个元素，即</p><p>left和right的位置有且仅有<code>2</code>种情况</p><ul><li><p><code>left = right</code></p><p>或</p></li><li><p><code>left = right -1</code></p></li></ul><p>为什么？ 举几个特例</p><ul><li>数组有一个元素，那么left &#x3D; right，还需要最后一次while循环</li><li>数组有两个元素，那么left &#x3D; right -1, 分<code>两种情况</code>，需要一或两次while循环<ol><li>比如数组 [1,3] ,target&#x3D;0，此时<code>left = right -1</code>, 然后还需最后一次while</li><li>比如数组 [1,3] ,target&#x3D;2，一次while循环后，left &#x3D; right &#x3D;1，并且变成了一个元素的情况，还要一次while，一共是2个while</li></ol></li><li>数组有三个，四个元素等等，都以此类推，最后都会变成以上的情况</li></ul><p>综上，数组最后会变为<code>一个元素</code>，或者两个元素中的<code>情况1</code></p><p>以上就解释清楚了，在进入最后一次while循环前，数组会变为一个或两个元素。</p><p>以下是一个元素和两个元素(<code>情况1</code>)的代码注释</p><ol><li>数组只有一个元素，假设nums&#x3D;[1]，left &#x3D; right</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">初始化<span class="attribute">left</span> = rigth=<span class="number">0</span></span><br><span class="line">while(left &lt; =right)&#123;         //进入最后一次循环</span><br><span class="line">     <span class="attribute">int</span> mid = (left + right) / <span class="number">2</span>;         //<span class="attribute">mid</span> =<span class="number">0</span>, 此时`left = mid = right=<span class="number">0</span>`</span><br><span class="line">     if (target == nums[mid]) &#123;          </span><br><span class="line">         <span class="attribute">return</span> mid;        //若找到，直接返回mid，下面两个else是没有找到target的情况</span><br><span class="line">     &#125; <span class="attribute">else</span> if (target &lt; nums[mid]) &#123;   </span><br><span class="line">         <span class="attribute">right</span> = mid - <span class="number">1</span>;  //此时数组中仅剩的最后一个数比target大，执行right=mid-1=-1, 而left=0正是要插入的位置</span><br><span class="line">     &#125; <span class="section">else</span> &#123;</span><br><span class="line">         <span class="attribute">left</span> = mid + <span class="number">1</span>;    //此时数组中仅剩的最后一个数比target小，执行<span class="attribute">left</span> =mid+<span class="number">1</span>=<span class="number">1</span>,  left=<span class="number">1</span>正是要插入的位置</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;//循环结束</span><br></pre></td></tr></table></figure><ol><li>数组有两个元素(<code>情况1</code>)，假设nums&#x3D;[1，3]，target &#x3D;0, left &#x3D; right -1</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">初始化<span class="attribute">left</span> = <span class="number">0</span>, rigth=<span class="number">1</span></span><br><span class="line">while(left &lt; =right)&#123;         //进入最后一次循环</span><br><span class="line">     <span class="attribute">int</span> mid = (left + right) / <span class="number">2</span>;         //<span class="attribute">mid</span> =<span class="number">0</span>, 此时`left = mid =<span class="number">0</span> , right =<span class="number">1</span> `</span><br><span class="line">     if (target == nums[mid]) &#123;          </span><br><span class="line">         <span class="attribute">return</span> mid;        //若找到，直接返回mid，下面两个else是没有找到target的情况</span><br><span class="line">     &#125; <span class="attribute">else</span> if (target &lt; nums[mid]) &#123;   </span><br><span class="line">         <span class="attribute">right</span> = mid - <span class="number">1</span>;  //此时<span class="attribute">target</span> &lt; nums[<span class="number">0</span>]，执行right=mid-<span class="number">1</span>=-<span class="number">1</span>, 而left=<span class="number">0</span>正是要插入的位置</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         <span class="attribute">left</span> = mid + <span class="number">1</span>;    //此时<span class="attribute">target</span> &gt; nums[<span class="number">0</span>]，执行left =mid+<span class="number">1</span>=<span class="number">1</span>,  left=<span class="number">1</span>正是要插入的位置</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;//循环结束</span><br></pre></td></tr></table></figure><p>总结：</p><p>1个元素的情况很简单，随便举个特例就行，如[1],target&#x3D;0或3。</p><p>2个元素中的<code>情况1</code>也可以举个特例，如[1, 3],target&#x3D;0。</p><p>都能发现，没有找到target返回left即可。</p><h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/">35. 搜索插入位置</a></h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素</p><ul><li>目标值在数组所有元素之前</li><li>目标值等于数组中某一个元素</li><li>目标值插入数组中的位置</li><li>目标值在数组所有元素之后</li></ul><p>同时题目还强调数组中无重复元素，因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;<span class="comment">//【】</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right-left)/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;<span class="comment">//或者right+1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后为什么返回left或者right+1</strong></p><p><strong>题解给的是左闭右闭解法，根据本题必须 return left &#x2F; return right+1，因为只要能缩小范围（你 left 或 right 赋值没出错），最后一定是 left &#x3D;&#x3D; right &#x3D;&#x3D; middle，此时只要分别分析下大于 nums[middle] 与 小于 nums[middle] 的两种情况就可以得出结论：两种情况都是 return left。 但如果是左闭右开解法，那么 return left&#x2F;right 都可以，不过要判断 target 是否会大于 nums[length-1] 这个最大值</strong></p><h3 id="34在排序数组中查找元素的第一个和最后一个位置"><a href="#34在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34在排序数组中查找元素的第一个和最后一个位置"></a>34<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">在排序数组中查找元素的第一个和最后一个位置</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        res[<span class="number">0</span>] = binarySearch(nums, target, <span class="literal">true</span>);</span><br><span class="line">        res[<span class="number">1</span>] = binarySearch(nums, target, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leftOrRight为true找左边界 false找右边界</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">boolean</span> leftOrRight)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &lt; nums[mid])</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; nums[mid])</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res = mid;</span><br><span class="line">                <span class="comment">//处理target == nums[mid]</span></span><br><span class="line">                <span class="keyword">if</span>(leftOrRight)</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="type">else</span></span><br><span class="line">                    <span class="variable">left</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿[1,3,3,3,4]，target &#x3D; 3举例，第一次二分mid &#x3D; 2，但是nums[2]的3并不是最左边界的3，然后leftOrRight为true，表示查找左侧边界的，所以要缩小右边界，right需要往左移，也就是right &#x3D; mid-1，false 则相反，要查找右侧边界，即扩大左边界</p><h3 id="69-x的平方根"><a href="#69-x的平方根" class="headerlink" title="69 x的平方根"></a>69 x的平方根</h3><ul><li>这道题要求我们实现平方根函数，输入是一个非负整数，输出也是一个整数；</li><li>但是题目当中说：结果只保留整数的部分，小数部分将被舍去。</li></ul><p>从题目的要求和示例我们可以看出，这其实是一个查找整数的问题，并且这个整数是有范围的。</p><ul><li>如果这个整数的平方 恰好等于 输入整数，那么我们就找到了这个整数；</li><li>如果这个整数的平方 严格大于 输入整数，那么这个整数肯定不是我们要找的那个数；</li><li><strong>如果这个整数的平方 严格小于 输入整数，那么这个整数 可能 是我们要找的那个数</strong>（重点理解这句话）</li></ul><p>参考</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="function">def <span class="title">mySqrt</span><span class="params">(self, x: <span class="type">int</span>)</span> -&gt; <span class="type">int</span>:</span></span><br><span class="line"><span class="function">        l =</span> <span class="number">0</span></span><br><span class="line">        r = x</span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            mid = (l+r)<span class="comment">//2</span></span><br><span class="line">            temp = mid**<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span>  temp &lt; x:</span><br><span class="line">                l = mid + <span class="number">1</span></span><br><span class="line">            elif temp &gt; x:</span><br><span class="line">                r = mid - <span class="number">1</span></span><br><span class="line">            elif temp == x:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        <span class="meta"># r一定会停在mid**2 &lt;= x的最大那个mid的位置，因为mid**2=x的mid如果存在的话在上面</span></span><br><span class="line">        # 就已经返回了，所以这里只需要返回r就好了</span><br><span class="line">        <span class="keyword">return</span> r </span><br></pre></td></tr></table></figure><p>自己写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//先判断特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>||x==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span>x/<span class="number">2</span>;   <span class="comment">//通过常理判断，平方根都不会超过x的一半</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;<span class="comment">//防止溢出</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left+((right-left)/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(mid &gt; x/mid)&#123;</span><br><span class="line">                <span class="comment">//平方比目标值大，那就缩小right 【left，mid-1】</span></span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mid &lt; x/mid)&#123;</span><br><span class="line">                <span class="comment">//平方比目标值小，那就增大left 【mid+1，right】</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//正好相等</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后为什么要返回right呢？</span></span><br><span class="line">        <span class="comment">//right一定会停在mid**2 &lt;= x的最大那个mid的位置，因为mid**2=x的mid如果存在的话在上面就已经</span></span><br><span class="line">        <span class="comment">//返回了，所以这里只需要返回r就好了</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果没有出现 mid &#x3D;&#x3D; x &#x2F; mid 的情况，最后到底是 return right 还是 return left？<br>1、可以通过调试得出；</p><p>2、循环结束的条件：left &#x3D; right + 1，示例中提示了当 x &#x3D; 8，其平方根是 2，有点类似于向下取整，循环退出时 left &#x3D; 3, 所以返回时 right。</p><h4 id="另一种解题思路"><a href="#另一种解题思路" class="headerlink" title="另一种解题思路"></a>另一种解题思路</h4><ul><li>整数x的平方根一定小于或等于x</li><li>除0之外的所有整数的平方根都大于或等于1</li><li>整数x的平方根一定是在1到x的范围内，取这个范围内的中间数字mid，并判断mid的平方是否小于或等于x，如果mid的平方小于x</li><li>那么接着判断(mid+1)的平方是否大于x，如果(mid+1)的平方大于x，那么mid就是x的平方根</li><li>如果mid的平方小于x并且(mid+1)的平方小于x，那么x的平方根比mid大，接下来搜索从mid+1到x的范围</li><li>如果mid的平方大于x，则x的平方根小于mid，接下来搜索1到mid-1的范围</li><li>然后在相应的范围内重复这个过程，总是取出位于范围中间的mid</li></ul>]]></content>
    
    
    <summary type="html">（打卡Day02） 对二分查找这个算法的理解，以及使用与联系，弄清楚所谓的区间问题；</summary>
    
    
    
    <category term="算法" scheme="http://xuzb0312.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://xuzb0312.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="算法打卡" scheme="http://xuzb0312.github.io/tags/%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/"/>
    
    <category term="二分查找" scheme="http://xuzb0312.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口（力扣算法题）</title>
    <link href="http://xuzb0312.github.io/2022/03/04/%E6%95%B0%E7%BB%84_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://xuzb0312.github.io/2022/03/04/%E6%95%B0%E7%BB%84_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2022-03-04T12:54:57.000Z</published>
    <updated>2022-03-04T13:10:06.612Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h3 id="209、长度最小的子数组"><a href="#209、长度最小的子数组" class="headerlink" title="209、长度最小的子数组"></a>209、长度最小的子数组</h3><p><strong>题目：</strong></p><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p><p>示例：</p><p>输入：s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。</p><p><strong>思路：</strong></p><p>自己暂时只想起来了双重for循环暴力破解，但是时间复杂度是O（n^2）;</p><p><strong>暴力破解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//int result = 0;//最后结果长度     出现错误，不可以等于0，因为0肯定是最小的。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;<span class="comment">//赋值给result int的最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leng</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//和</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            sum = <span class="number">0</span>;<span class="comment">//外层循环一次就清0一次。</span></span><br><span class="line">            leng =<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;j&lt;nums.length;j++)&#123;<span class="comment">//内层循环用于相加。</span></span><br><span class="line">                sum+=nums[j];</span><br><span class="line">                leng++;</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                    result = result&gt;=leng?leng:result;</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//退出内层循环</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result==Integer.MAX_VALUE?<span class="number">0</span>:result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>滑动窗口</strong></p><p>所谓滑动窗口，<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。</p><p>这里还是以题目中的示例来举例，s&#x3D;7， 数组是 2，3，1，2，4，3，来看一下查找的过程：</p><p><img src="/2022/03/04/%E6%95%B0%E7%BB%84_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif" alt="209.长度最小的子数组"></p><p>最后找到 4，3 是最短距离。</p><p>其实从动画中可以发现滑动窗口也可以理解为双指针法的一种！只不过这种解法更像是一个窗口的移动，所以叫做滑动窗口更适合一些。</p><p>在本题中实现滑动窗口，主要确定如下三点：</p><ul><li>窗口内是什么？</li><li>如何移动窗口的起始位置？</li><li>如何移动窗口的结束位置？</li></ul><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，窗口的起始位置设置为数组的起始位置就可以了。</p><p>解题的关键在于 窗口的起始位置如何移动，如图所示：</p><p><img src="/2022/03/04/%E6%95%B0%E7%BB%84_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/20210312160441942.png" alt="leetcode_209"></p><p>可以发现<strong>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将$O(n^2)$的暴力解法降为$O(n)$。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;<span class="comment">//赋值给result int的最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">subleng</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//窗口长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>;<span class="comment">//左边的起始指针</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length;i++)&#123;<span class="comment">//i是窗口右边的指针</span></span><br><span class="line">                sum+=nums[i];</span><br><span class="line">                <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">                    subleng=i-j+<span class="number">1</span>;<span class="comment">//窗口大小</span></span><br><span class="line">                    result = result &gt;= subleng?subleng:result;<span class="comment">//判断返回的长度与现在的长度哪个更小。</span></span><br><span class="line">                    sum-=nums[j++];</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result==Integer.MAX_VALUE?<span class="number">0</span>:result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><p>不要以为for里放一个while就以为是$O(n^2)$啊， 主要是看每一个元素被操作的次数，每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被被操作两次，所以时间复杂度是 2 × n 也就是$O(n)$。</p><h3 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a><a href="https://leetcode-cn.com/problems/fruit-into-baskets/">904. 水果成篮</a></h3><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。</p><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><p>你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。<br>你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。<br>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。<br>给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。</p><p><img src="/2022/03/04/%E6%95%B0%E7%BB%84_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/image-20220304204703486.png" alt="image-20220304204703486"></p><ul><li>说人话的问题描述:满足子数组只包含最多2个不同值的最长子数组长度。</li><li>考虑以每个元素为数组结尾的满足题意的最大长度。</li><li>right表示结尾元素，left表示开头元素，初始值均为0。</li><li>不断移动right，直到子数组不满足题意。</li><li>当不满足题意时，就不断移动left，直到满足题意。</li><li>此时就是以right为结尾的满足题意的最大长度。</li><li>每次移动一次right，就记录以right为结尾的满足题意的子数组的长度的最大值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">       HashMap&lt;Integer,Integer&gt; map= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(R=<span class="number">0</span>;R&lt;fruits.length;R++)&#123;</span><br><span class="line">           <span class="comment">//首先判断map中是否存在这个值</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> map.containsKey(fruits[R])?map.get(fruits[R]):<span class="number">0</span>;</span><br><span class="line">           map.put(fruits[R],value+<span class="number">1</span>);<span class="comment">//将R放进窗口，值+1</span></span><br><span class="line">           <span class="keyword">if</span>(map.size()&gt;=<span class="number">3</span>)&#123;<span class="comment">//如果map中的种类大于2</span></span><br><span class="line">                map.put(fruits[L],map.get(fruits[L])-<span class="number">1</span>);<span class="comment">//缩小窗口,将值减一</span></span><br><span class="line">                <span class="keyword">if</span>(map.get(fruits[L])==<span class="number">0</span>)&#123;<span class="comment">//如果map中，这个种类等于0，那么将移除它</span></span><br><span class="line">                    map.remove(fruits[L]);</span><br><span class="line">                &#125;</span><br><span class="line">                L++;<span class="comment">//缩小窗口</span></span><br><span class="line">           &#125;</span><br><span class="line">           sub=R-L+<span class="number">1</span>;</span><br><span class="line">           result=result&gt;sub?result:sub;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法基本学习完毕，需要巩固"><a href="#方法基本学习完毕，需要巩固" class="headerlink" title="方法基本学习完毕，需要巩固"></a>方法基本学习完毕，需要巩固</h2><ol><li>二分查找</li><li>快慢指针</li><li>双指针</li><li>滑动窗口</li></ol>]]></content>
    
    
    <summary type="html">（打卡Day03） 对滑动窗口算法进行学习与研究，类似于双指针，对窗口的大小灵巧的控制是关键；</summary>
    
    
    
    <category term="算法" scheme="http://xuzb0312.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://xuzb0312.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="算法打卡" scheme="http://xuzb0312.github.io/tags/%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1/"/>
    
    <category term="滑动窗口" scheme="http://xuzb0312.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>数组的概念</title>
    <link href="http://xuzb0312.github.io/2022/03/04/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    <id>http://xuzb0312.github.io/2022/03/04/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/</id>
    <published>2022-03-04T12:54:57.000Z</published>
    <updated>2022-03-04T13:10:59.215Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="数组基础理论"><a href="#数组基础理论" class="headerlink" title="数组基础理论"></a>数组基础理论</h2><p>数组是非常基础的数据结构，在面试中，考察数组的题目一般在思维上都不难，主要是考察对代码的掌控能力</p><p>也就是说，想法很简单，但实现起来 可能就不是那么回事了。</p><p>首先要知道数组在内存中的存储方式，这样才能真正理解数组相关的面试题</p><p><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong></p><p>数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p><p>举一个字符数组的例子，如图所示：</p><p><img src="/2022/03/04/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%84.png" alt="算法通关数组"></p><p>需要两点注意的是</p><ul><li><strong>数组下标都是从0开始的。</strong></li><li><strong>数组内存空间的地址是连续的</strong></li></ul><p>正是<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong></p><p>例如删除下标为3的元素，需要对下标为3的元素后面的所有元素都要做移动操作，如图所示：</p><p><img src="/2022/03/04/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%841.png" alt="算法通关数组1"></p><p>而且大家如果使用C++的话，要注意vector 和 array的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。</p><p><strong>数组的元素是不能删的，只能覆盖。</strong></p><p>那么二维数组直接上图，大家应该就知道怎么回事了</p><p><img src="/2022/03/04/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%842.png" alt="算法通关数组2"></p><p><strong>那么二维数组在内存的空间地址是连续的么？</strong></p><p>不同编程语言的内存管理是不一样的，以C++为例，在C++中二维数组是连续分布的。</p><p>我们来做一个实验，C++测试代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_arr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> array[<span class="number">2</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    cout &lt;&lt; &amp;array[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; &amp;array[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; &amp;array[<span class="number">0</span>][<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &amp;array[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; &amp;array[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; &amp;array[<span class="number">1</span>][<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test_arr</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试地址为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffee4065820 0x7ffee4065824 0x7ffee4065828</span><br><span class="line">0x7ffee406582c 0x7ffee4065830 0x7ffee4065834</span><br></pre></td></tr></table></figure><p>注意地址为16进制，可以看出二维数组地址是连续一条线的。</p><p>一些录友可能看不懂内存地址，我就简单介绍一下， 0x7ffee4065820 与 0x7ffee4065824 差了一个4，就是4个字节，因为这是一个int型的数组，所以两个相邻数组元素地址差4个字节。</p><p>0x7ffee4065828 与 0x7ffee406582c 也是差了4个字节，在16进制里8 + 4 &#x3D; c，c就是12。</p><p>如图：</p><p><img src="/2022/03/04/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/20210310150641186.png" alt="数组内存"></p><p><strong>所以可以看出在C++中二维数组在地址空间上是连续的</strong>。</p><p>像Java是没有指针的，同时也不对程序员暴露其元素的地址，寻址操作完全交给虚拟机。</p><p>所以看不到每个元素的地址情况，这里我以Java为例，也做一个实验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test_arr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, &#123;<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的地址为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[I@7852e922</span><br><span class="line">[I@4e25154f</span><br><span class="line">[I@70dea4e</span><br><span class="line">[I@5c647e05</span><br></pre></td></tr></table></figure><p>这里的数值也是16进制，这不是真正的地址，而是经过处理过后的数值了，我们也可以看出，二维数组的每一行头结点的地址是没有规则的，更谈不上连续。</p><p>所以Java的二维数组可能是如下排列的方式：</p><p><img src="/2022/03/04/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/20201214111631844.png" alt="算法通关数组3"></p><p>这里面试中数组相关的理论知识就介绍完了。</p>]]></content>
    
    
    <summary type="html">数组的存储结构，以及理论基础等面试中会遇到的基础介绍，数组内存地址是连续的，不可删除元素，只能覆盖，一个数组中只能存放一个类型的元素；</summary>
    
    
    
    <category term="算法" scheme="http://xuzb0312.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://xuzb0312.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="概念" scheme="http://xuzb0312.github.io/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（峰迷商城）</title>
    <link href="http://xuzb0312.github.io/2022/03/03/SpringBoot/"/>
    <id>http://xuzb0312.github.io/2022/03/03/SpringBoot/</id>
    <published>2022-03-03T04:12:57.000Z</published>
    <updated>2022-03-03T11:01:19.382Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="一、项目整合与部署存在的问题"><a href="#一、项目整合与部署存在的问题" class="headerlink" title="一、项目整合与部署存在的问题"></a>一、项目整合与部署存在的问题</h1><h2 id="1-1、SSM手动整合存在的问题"><a href="#1-1、SSM手动整合存在的问题" class="headerlink" title="1.1、SSM手动整合存在的问题"></a>1.1、SSM手动整合存在的问题</h2><ul><li>步骤多，配置繁琐<ul><li>创建Maven</li><li>部署mybatis：添加依赖、创建配置文件</li><li>部署Spring、SpringMVC：添加依赖、创建配置文件</li><li>添加整合依赖</li><li>整合配置</li></ul></li><li>将项目部署到主机上，分为几步？<ol><li>安装JDK</li><li>安装Tomcat</li><li>安装MySQL</li><li>打包SSM项目</li><li>部署项目：将war包放到Tomcat里面</li><li>启动Tomcat</li></ol></li><li>项目进行服务器部署步骤繁琐，需要手动部署</li></ul><h2 id="1-2、如何简化这些繁琐的配置和部署步骤？"><a href="#1-2、如何简化这些繁琐的配置和部署步骤？" class="headerlink" title="1.2、如何简化这些繁琐的配置和部署步骤？"></a>1.2、如何简化这些繁琐的配置和部署步骤？</h2><ul><li>SpringBoot就是一个可以简化整合过程中复杂配置的框架</li></ul><h1 id="二、SpringBoot简介"><a href="#二、SpringBoot简介" class="headerlink" title="二、SpringBoot简介"></a>二、SpringBoot简介</h1><h2 id="2-1、概念"><a href="#2-1、概念" class="headerlink" title="2.1、概念"></a>2.1、概念</h2><ul><li>随着动态语言的流行、Java语言的开发就显得格外笨重：配置繁琐、开发效率低、项目的部署变得复杂、集成第三方技术难度大。</li><li>在这种情况下，SpringBoot应运而生</li><li><strong>SpringBoot采用了<code>习惯大于配置/约定大于配置</code>的理念快速的搭建项目的开发环境，我们无需或者很少的相关配置就能够快速的将项目运行起来</strong></li></ul><h2 id="2-2、优点"><a href="#2-2、优点" class="headerlink" title="2.2、优点"></a>2.2、优点</h2><ul><li>能够快速的搭建项⽬</li><li>对主流的开发框架都提供了⽆配置集成（Spring-Boot内置了配置）</li><li>项⽬可以独⽴运⾏、⽆需单独配置Servlet容器（内置了Tomcat）</li><li>极⼤提⾼了开发、部署效率</li><li>提供了运⾏时监控系统（⽇志等）</li><li>与云原⽣有天然的集成</li></ul><h2 id="2-3、缺点"><a href="#2-3、缺点" class="headerlink" title="2.3、缺点"></a>2.3、缺点</h2><ul><li>由于配置都是内置的，报错时定位⽐较困难</li><li>版本迭代速度⽐较快、有些版本改动还是⽐较⼤（增加学习成本）</li></ul><h1 id="三、第一个SpringBoot应用"><a href="#三、第一个SpringBoot应用" class="headerlink" title="三、第一个SpringBoot应用"></a>三、第一个SpringBoot应用</h1><blockquote><p>体验：基于SpringBoot整合SpringMVC<br>SpringBoot应⽤需要依赖远程服务器进⾏创建</p><p>远程服务器：</p><ul><li>Spring官⽅： <a href="https://start.spring.io/">https://start.spring.io</a></li><li>ali： <a href="https://start.aliyun.com/">https://start.aliyun.com</a></li></ul></blockquote><h2 id="3-1、创建项目"><a href="#3-1、创建项目" class="headerlink" title="3.1、创建项目"></a>3.1、创建项目</h2><h3 id="3-1-1、File—New—Project"><a href="#3-1-1、File—New—Project" class="headerlink" title="3.1.1、File—New—Project"></a>3.1.1、File—New—Project</h3><p><img src="/2022/03/03/SpringBoot/image-20220121201612972.png" alt="image-20220121201612972"></p><h3 id="3-1-2、填写项⽬信息"><a href="#3-1-2、填写项⽬信息" class="headerlink" title="3.1.2、填写项⽬信息"></a>3.1.2、填写项⽬信息</h3><p><img src="/2022/03/03/SpringBoot/image-20220122083916026.png" alt="image-20220122083916026"></p><h3 id="3-1-3、选择项⽬依赖"><a href="#3-1-3、选择项⽬依赖" class="headerlink" title="3.1.3、选择项⽬依赖"></a>3.1.3、选择项⽬依赖</h3><p><img src="/2022/03/03/SpringBoot/image-20220122083937257.png" alt="image-20220122083937257"></p><h3 id="3-1-4、选择项⽬存储⽬录"><a href="#3-1-4、选择项⽬存储⽬录" class="headerlink" title="3.1.4、选择项⽬存储⽬录"></a>3.1.4、选择项⽬存储⽬录</h3><p><img src="/2022/03/03/SpringBoot/image-20220122083955234.png" alt="image-20220122083955234"></p><h3 id="3-1-5、网页创建SpringBoot应用"><a href="#3-1-5、网页创建SpringBoot应用" class="headerlink" title="3.1.5、网页创建SpringBoot应用"></a>3.1.5、网页创建SpringBoot应用</h3><p>如果基于IDEA创建⽆法下载，可以基于⽹⻚版进⾏创建</p><p><img src="/2022/03/03/SpringBoot/image-20220122084037554.png" alt="image-20220122084037554"></p><h2 id="3-2、配置项目"><a href="#3-2、配置项目" class="headerlink" title="3.2、配置项目"></a>3.2、配置项目</h2><h3 id="3-2-1、应⽤项⽬结构"><a href="#3-2-1、应⽤项⽬结构" class="headerlink" title="3.2.1、应⽤项⽬结构"></a>3.2.1、应⽤项⽬结构</h3><p><img src="/2022/03/03/SpringBoot/image-20220122084209836.png" alt="image-20220122084209836"></p><p>3.2.2、⾃定义配置(整合MyBatis)</p><blockquote><p>SpringBoot帮助我们完成通⽤性配置，但是像数据库连接地址、账号、密码等还是需要⼿动完成配置</p></blockquote><ul><li><p>修改mysql驱动的版本（选择性）</p><p><img src="/2022/03/03/SpringBoot/image-20220122092921532.png" alt="image-20220122092921532"></p></li><li><p>在SpringBoot主配置⽂件<code>application.properties</code>⽂件中配置数据源及路径</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据源 （key必须按照SpringBoot的要求）</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/db_2010_mybatis?characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">admin123</span></span><br><span class="line"><span class="comment"># 配置映射⽂件路径及实体类的包名</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mappers/*Mapper.xml</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.qfedu.springboot.demo.entity</span></span><br></pre></td></tr></table></figure></li><li><p>在SpringBoot启动类通过<code>@MapperScan</code>注解指定DAO接⼝的包名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.xu.springboot.demo1.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootDemo1Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootDemo1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3、启动项目"><a href="#3-3、启动项目" class="headerlink" title="3.3、启动项目"></a>3.3、启动项目</h2><h3 id="3-3-1、启动"><a href="#3-3-1、启动" class="headerlink" title="3.3.1、启动"></a>3.3.1、启动</h3><blockquote><p>SpringBoot应⽤⾃带Servlet容器—Tomcat,因此⽆需进⾏额外的服务器配置，运⾏启动类即可启动⼀个SpringBoot应⽤</p></blockquote><h3 id="3-3-2、测试"><a href="#3-3-2、测试" class="headerlink" title="3.3.2、测试"></a>3.3.2、测试</h3><blockquote><p>⽤户的注册功能</p></blockquote><p>新知识：主键回填</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBook&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into t_book (b_name,author) values (#&#123;name&#125;,#&#123;author&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        这种方式比较简单，就是在插入节点上添加 useGeneratedKeys 属性，同时设置接收回传主键的属性。配置完成后，我们执行一个插入操作，插入时传入一个对象，插入完成后，这个对象的 id 就会被自动赋值，值就是刚刚插入成功的id。</p><ol><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">userRegist</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">userRegist</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.addUser(user);</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  user;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">refist</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.userRegist(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="http://localhost:8080/user/add?name=2www&amp;password=1223">http://localhost:8080/user/add?name=2www&amp;password=1223</a></p></li><li><p>注意，数据库id需要支持自增长，否则会报错。</p></li></ol><h1 id="四、SpringBoot原理"><a href="#四、SpringBoot原理" class="headerlink" title="四、SpringBoot原理"></a>四、SpringBoot原理</h1><h2 id="4-1、starter"><a href="#4-1、starter" class="headerlink" title="4.1、starter"></a>4.1、starter</h2><blockquote><p>⼀个starter就是⼀个开发场景的⽀持（ 依赖 + 配置）<br>SpringBoot为我们提供了简化企业级开发绝⼤多数场景的⽀持（提供了多个starter），我们在进⾏项⽬开发的过程中只需引⼊对应的starter（创建SpringBoot应⽤时可选择），相关的依赖和配置就会被内置到项⽬中（消除⼈⼯配置）。</p></blockquote><h3 id="4-1-1、starter依赖"><a href="#4-1-1、starter依赖" class="headerlink" title="4.1.1、starter依赖"></a>4.1.1、starter依赖</h3><blockquote><p>⼀个starter依赖表示的不是⼀个依赖，⽽是某种开发环境所需的⼀组依赖</p></blockquote><ul><li>Spring Web —<code>spring-boot-starter-web</code></li><li>MyBatis Framework — <code>mybatis-spring-boot-starter</code></li></ul><h3 id="4-1-2、starter配置"><a href="#4-1-2、starter配置" class="headerlink" title="4.1.2、starter配置"></a>4.1.2、starter配置</h3><blockquote><p>⼀个starter不仅包含所需依赖，还包含了其所需的对应的配置</p></blockquote><ul><li><p>MyBatis Framework — <code>mybatis-spring-boot-starter</code></p><ul><li><p>依赖</p><p><img src="/2022/03/03/SpringBoot/image-20220122184449394.png" alt="image-20220122184449394"></p></li><li><p>配置</p><p><img src="/2022/03/03/SpringBoot/image-20220122184509717.png" alt="image-20220122184509717"></p></li></ul></li></ul><h3 id="4-1-3、案例"><a href="#4-1-3、案例" class="headerlink" title="4.1.3、案例"></a>4.1.3、案例</h3><blockquote><p>引⼊redis开发场景</p></blockquote><ul><li><p>添加starter依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在service中可以直接注⼊redis客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2、SpringBoot应⽤的pom⽂件"><a href="#4-2、SpringBoot应⽤的pom⽂件" class="headerlink" title="4.2、SpringBoot应⽤的pom⽂件"></a>4.2、SpringBoot应⽤的pom⽂件</h2><h3 id="4-2-1、基于Spring官⽅服务器创建的SpringBoot应⽤"><a href="#4-2-1、基于Spring官⽅服务器创建的SpringBoot应⽤" class="headerlink" title="4.2.1、基于Spring官⽅服务器创建的SpringBoot应⽤"></a>4.2.1、基于Spring官⽅服务器创建的SpringBoot应⽤</h3><ul><li>继承spring-boot-starter-parent.pom</li></ul><p>为什么只输入starter就可以出来版本号？是因为在父pom中已经定义。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchemainstance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-</span></span></span><br><span class="line"><span class="string"><span class="tag">                             4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot应⽤中的pom 继承了spring-boot-starter-parent.pom --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-boot-starter-parent.pom⼜继承了spring-boot-dependencies.pom--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在spring-boot-dependencies.pom已经对主流的框架的版本进⾏了声明 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>引⼊了maven对springboot应⽤⽀持的插件 spring-boot</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xu.springboot.demo1.SpringbootDemo1Application<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-2、基于ali服务器创建的SpringBoot应⽤"><a href="#4-2-2、基于ali服务器创建的SpringBoot应⽤" class="headerlink" title="4.2.2、基于ali服务器创建的SpringBoot应⽤"></a>4.2.2、基于ali服务器创建的SpringBoot应⽤</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchemainstance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">                             https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qfedu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-demo2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-demo2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot应⽤的pom没有继承spring-boot-starter-parent.pom，因此版本需要在当前pom中进⾏定义 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.qfedu.springboot.demo2.SpringbootDemo2Application<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3、java配置方式"><a href="#4-3、java配置方式" class="headerlink" title="4.3、java配置方式"></a>4.3、java配置方式</h2><blockquote><p>如果我们需要在SpringBoot应⽤中整合⼀种新的开发场景，只需在pom.xml引⼊对应的starter即可</p><p>⼀个starter不仅包含依赖，还包含相应的配置，starter中包含的配置都是通过Java类实现的–Java配置⽅式</p></blockquote><h3 id="4-3-1、Spring版本发展"><a href="#4-3-1、Spring版本发展" class="headerlink" title="4.3.1、Spring版本发展"></a>4.3.1、Spring版本发展</h3><blockquote><p>随着Spring版本的迭代，配置⽅式也在发⽣变化</p></blockquote><ul><li>Spring 1.x<ul><li>所有的bean的配置只能通过xml完成</li></ul></li><li>Spring 2.x<ul><li>基于JDK1.5对注解的⽀持，Spring 2.x开始⽀持注解</li><li>企业开发中到底是⽤xml配置还是⽤注解？<ul><li>对基础配置、引⽤的第三⽅依赖中的配置使⽤xml完成：例如数据源配置</li><li>业务开发使⽤注解：例如controller、service</li></ul></li></ul></li><li>Spring 3.x<ul><li>Spring 开始提供基于Java的配置⽅式</li></ul></li><li>Spring 4.x<ul><li>xml、注解、Java</li></ul></li></ul><h3 id="4-3-2、xml配置"><a href="#4-3-2、xml配置" class="headerlink" title="4.3.2、xml配置"></a>4.3.2、xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qfedu.beans.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3、注解配置"><a href="#4-3-3、注解配置" class="headerlink" title="4.3.3、注解配置"></a>4.3.3、注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4、Java配置⽅式"><a href="#4-3-4、Java配置⽅式" class="headerlink" title="4.3.4、Java配置⽅式"></a>4.3.4、Java配置⽅式</h3><ul><li>创建配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getDate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4、SpringBoot⾃动配置过程（重点掌握）"><a href="#4-4、SpringBoot⾃动配置过程（重点掌握）" class="headerlink" title="4.4、SpringBoot⾃动配置过程（重点掌握）"></a>4.4、SpringBoot⾃动配置过程（重点掌握）</h2><p><img src="/2022/03/03/SpringBoot/image-20220124112627046.png" alt="image-20220124112627046"></p><h2 id="4-5、全局配置⽂件"><a href="#4-5、全局配置⽂件" class="headerlink" title="4.5、全局配置⽂件"></a>4.5、全局配置⽂件</h2><blockquote><p>SpringBoot针对不同的开发场景提供默认的属性配置，如果默认的配置不能满⾜开发的需要，我们需要对属<br>性配置进⾏修改</p></blockquote><ul><li>SpringBoot应⽤提供了⼀个全局配置⽂件<code>application.properties</code>⽤于进⾏⾃定义配置</li><li>全局配置⽂件⽀持2中语法配置：<ul><li>properties 键值对配置</li><li>yaml 语法的配置</li></ul></li></ul><h3 id="4-5-1、基于properties配置"><a href="#4-5-1、基于properties配置" class="headerlink" title="4.5.1、基于properties配置"></a>4.5.1、基于properties配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据源 （key必须按照SpringBoot的要求）</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 配置映射⽂件路径及实体类的包名</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.example.demo1.pojo</span></span><br></pre></td></tr></table></figure><h3 id="4-5-2、基于yaml配置"><a href="#4-5-2、基于yaml配置" class="headerlink" title="4.5.2、基于yaml配置"></a>4.5.2、基于yaml配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_2010_mybatis?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">admin123</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">    <span class="attr">mapper-locations:</span> <span class="string">classpath:mappers/*Mapper.xml</span></span><br><span class="line">    <span class="attr">type-aliases-package:</span> <span class="string">com.qfedu.springboot.demo.entity</span></span><br></pre></td></tr></table></figure><h3 id="4-5-3、常⽤的全局配置"><a href="#4-5-3、常⽤的全局配置" class="headerlink" title="4.5.3、常⽤的全局配置"></a>4.5.3、常⽤的全局配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">        <span class="attr">context-path:</span> <span class="string">/demo1</span></span><br></pre></td></tr></table></figure><h2 id="4-6、⾃定义Banner"><a href="#4-6、⾃定义Banner" class="headerlink" title="4.6、⾃定义Banner"></a>4.6、⾃定义Banner</h2><ul><li><p>在SpringBoot应⽤启动的时候是有⼀个默认启动图案的</p></li><li><p>这个默认图案⽀持⾃定义配置</p><ul><li>在resources⽬录创建⼀个banner.txt</li><li>在banner.txt⽂件中定义图案 <a href="http://patorjk.com/software/taag/">http://patorjk.com/software/taag/</a></li></ul></li><li><p>佛祖保佑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">////////////////////////////////////////////////////////////////////</span><br><span class="line">// _ooOoo_ //</span><br><span class="line">// o8888888o //</span><br><span class="line">// 88&quot; . &quot;88 //</span><br><span class="line">// (| ^_^ |) //</span><br><span class="line">// O\ = /O //</span><br><span class="line">// ____/`---&#x27;\____ //</span><br><span class="line">// .&#x27; \\| |// `. //</span><br><span class="line">// / \\||| : |||// \ //</span><br></pre></td></tr></table></figure></li></ul><h1 id="五、SpringBoot整合JSP"><a href="#五、SpringBoot整合JSP" class="headerlink" title="五、SpringBoot整合JSP"></a>五、SpringBoot整合JSP</h1><blockquote><p>SpringBoot应⽤默认⽀持的动态⽹⻚技术是Thymeleaf，并不⽀持JSP；因此在SpringBoot应⽤想要使⽤JSP需要通过⼿动整合来实现</p></blockquote><h2 id="5-1、-添加依赖"><a href="#5-1、-添加依赖" class="headerlink" title="5.1、 添加依赖"></a>5.1、 添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-2、-创建JSP⻚⾯"><a href="#5-2、-创建JSP⻚⾯" class="headerlink" title="5.2、 创建JSP⻚⾯"></a>5.2、 创建JSP⻚⾯</h2><ul><li>修改pom⽂件打包⽅式为war</li><li>在main中创建webapp⽬录</li><li>在webapp创建.jsp⻚⾯</li></ul><h2 id="5-3、将JSP⻚⾯放在WEB-INF中的访问"><a href="#5-3、将JSP⻚⾯放在WEB-INF中的访问" class="headerlink" title="5.3、将JSP⻚⾯放在WEB-INF中的访问"></a>5.3、将JSP⻚⾯放在WEB-INF中的访问</h2><ul><li><p><strong>将JSP⽂件存放到WEB-INF⽬录(只能通过controller进行访问)</strong></p></li><li><p>在application.yml⽂件配置SpringMVC视图解析⽅式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/WEB-INF/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.demo1.pojo</span></span><br></pre></td></tr></table></figure></li><li><p>创建PageController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index.html&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="http://localhost:8080/index.html">http://localhost:8080/index.html</a></p><h1 id="六、基于SpringBoot的SSM整合"><a href="#六、基于SpringBoot的SSM整合" class="headerlink" title="六、基于SpringBoot的SSM整合"></a>六、基于SpringBoot的SSM整合</h1><h2 id="6-1、创建Springboot项⽬"><a href="#6-1、创建Springboot项⽬" class="headerlink" title="6.1、创建Springboot项⽬"></a>6.1、创建Springboot项⽬</h2><ul><li><p>创建项⽬时添加依赖</p><ul><li>lombok</li><li>spring  web</li><li>mysql driver</li><li>mybatis framework</li></ul></li><li><p>修改mysql驱动的版本（可选）    因为8.0的版本需要加jc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pom.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="6-2、进⾏MyBatis所需的配置"><a href="#6-2、进⾏MyBatis所需的配置" class="headerlink" title="6.2、进⾏MyBatis所需的配置"></a>6.2、进⾏MyBatis所需的配置</h2><ul><li><p>将默认创建的application.properties后缀名修改为 &#x3D;&#x3D;yml&#x3D;&#x3D; (根据习惯可选)</p></li><li><p>完成MyBatis的⾃定义配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">datasource:</span></span><br><span class="line">     <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">     <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_2010_mybatis?characterEncoding=utf-8</span></span><br><span class="line">     <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">admin123</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"> <span class="attr">type-aliases-package:</span> <span class="string">com.qfedu.springboot.ssm.beans</span></span><br><span class="line"> <span class="attr">mapper-locations:</span> <span class="string">classpath:mappers/*Mapper.xml</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="6-3、在启动类配置DAO扫描"><a href="#6-3、在启动类配置DAO扫描" class="headerlink" title="6.3、在启动类配置DAO扫描"></a>6.3、在启动类配置DAO扫描</h2><ul><li><p>@MapperScan</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.qfedu.springboot.ssm.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootSsmApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootSsmApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-4、整合Druid连接池"><a href="#6-4、整合Druid连接池" class="headerlink" title="6.4、整合Druid连接池"></a>6.4、整合Druid连接池</h2><blockquote><p>在SpringBoot中整合MyBatis的时候，默认集成了Hikari连接池，Hikari的效率⽐Druid要⾼，但是得益于Druid提供了⽐较便捷的监控系统在企业开发中，druid使⽤还是最多的。</p></blockquote><h3 id="6-4-1、添加druid的starter"><a href="#6-4-1、添加druid的starter" class="headerlink" title="6.4.1、添加druid的starter"></a>6.4.1、添加druid的starter</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-2、配置druid数据源"><a href="#6-4-2、配置druid数据源" class="headerlink" title="6.4.2、配置druid数据源"></a>6.4.2、配置druid数据源</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=utf-8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h1 id="七、Thymeleaf"><a href="#七、Thymeleaf" class="headerlink" title="七、Thymeleaf"></a>七、Thymeleaf</h1><blockquote><p>Thymeleaf是⼀种类似于JSP的动态⽹⻚技术</p></blockquote><h2 id="7-1-、Thymeleaf简介"><a href="#7-1-、Thymeleaf简介" class="headerlink" title="7.1 、Thymeleaf简介"></a>7.1 、Thymeleaf简介</h2><ul><li><p>JSP 必须依赖Tomcat运⾏，不能直接运⾏在浏览器中</p></li><li><p>HTML可以直接运⾏在浏览器中，但是不能接收控制器（后端）传递的数据</p></li><li><p>Thymeleaf是⼀种既保留了HTML的后缀能够直接在浏览器运⾏的能⼒、⼜实现了JSP显示动态数据的功能——</p><p>静能查看⻚⾯效果、动则可以显示数据</p></li></ul><h2 id="7-2、Thymeleaf的使⽤"><a href="#7-2、Thymeleaf的使⽤" class="headerlink" title="7.2、Thymeleaf的使⽤"></a>7.2、Thymeleaf的使⽤</h2><blockquote><p>SpringBoot应⽤对Thymeleaf提供了良好的⽀持</p></blockquote><h3 id="7-2-1、添加thymeleaf的starter"><a href="#7-2-1、添加thymeleaf的starter" class="headerlink" title="7.2.1、添加thymeleaf的starter"></a>7.2.1、添加thymeleaf的starter</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-2、创建Thymeleaf模板"><a href="#7-2-2、创建Thymeleaf模板" class="headerlink" title="7.2.2、创建Thymeleaf模板"></a>7.2.2、创建Thymeleaf模板</h3><blockquote><p>Thymeleaf模板就是HTML⽂件(不过是添加了一个命名空间)</p></blockquote><ul><li><p>SpringBoot应⽤中 <code>resources\templates </code>⽬录就是⽤来存放⻚⾯模板的</p></li><li><p><code>重要说明：</code></p><ul><li><p>static ⽬录下的资源被定义静态资源，SpringBoot应⽤默认放⾏；如果将HTML⻚⾯创建static⽬录是可以</p><p>直接访问的</p></li></ul></li><li><p>templates ⽬录下的⽂件会被定义为动态⽹⻚模板，SpringBoot应⽤会拦截templates中定义的资源；如果将</p><p>HTML⽂件定义在templates⽬录，则必须通过控制器跳转访问。</p></li><li><p>在templates创建HTML⻚⾯模板</p></li><li><p>创建PageController，⽤于转发允许”直接访问”的⻚⾯请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test.html&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意</code>：需要注意的是Thymeleaf模板不需要指定前缀和后缀，已经指定了默认值</p><p><img src="/2022/03/03/SpringBoot/image-20220211111634326.png" alt="image-20220211111634326"></p></li></ul><h2 id="7-3、Thymeleaf基本语法"><a href="#7-3、Thymeleaf基本语法" class="headerlink" title="7.3、Thymeleaf基本语法"></a>7.3、Thymeleaf基本语法</h2><blockquote><p>如果要在Thymeleaf</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/103089477">SpringBoot【Thymeleaf篇】 - 知乎 (zhihu.com)</a></p><h3 id="7-3-1、在thymeleaf模板⻚⾯引⼊th标签的命名空间"><a href="#7-3-1、在thymeleaf模板⻚⾯引⼊th标签的命名空间" class="headerlink" title="7.3.1、在thymeleaf模板⻚⾯引⼊th标签的命名空间"></a>7.3.1、在thymeleaf模板⻚⾯引⼊th标签的命名空间</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-2、th-text"><a href="#7-3-2、th-text" class="headerlink" title="7.3.2、th:text"></a>7.3.2、th:text</h3><blockquote><p>在⼏乎所有的HTML双标签都可以使⽤ th:text属性，将接收到的数据显示在标签的内容中</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;price&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span>   //int</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;str&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> //字符串</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.bookName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>//对象</span><br></pre></td></tr></table></figure><h3 id="7-3-3、th-inline-内联"><a href="#7-3-3、th-inline-内联" class="headerlink" title="7.3.3、th:inline 内联"></a>7.3.3、th:inline 内联</h3><ul><li><p>HTML内联</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">&quot;text&quot;</span>&gt;</span>图书名称：[[$&#123;book.bookName&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS内联</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">th:inline</span>=<span class="string">&quot;css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.style1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:[[$&#123;<span class="attribute">color</span>&#125;]]</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>JavaScript内联</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;css/javascript&quot;</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-3-4、th-object-和"><a href="#7-3-4、th-object-和" class="headerlink" title="7.3.4、th:object 和 *"></a>7.3.4、th:object 和 *</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;book&#125;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;bookId&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;bookName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;bookAuthor&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/03/03/SpringBoot/v2-23dfc3cab29610643a2a7d40e352a9dd_r.jpg" alt="preview"></p><h2 id="7-4、流程控制"><a href="#7-4、流程控制" class="headerlink" title="7.4、流程控制"></a>7.4、流程控制</h2><h3 id="7-4-1、th-each-循环"><a href="#7-4-1、th-each-循环" class="headerlink" title="7.4.1、th:each 循环"></a>7.4.1、th:each 循环</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>图书信息列表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>图书ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>图书名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;b:$&#123;books&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;b.bookId&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;b.bookName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;b.bookAuthor&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-2、分⽀"><a href="#7-4-2、分⽀" class="headerlink" title="7.4.2、分⽀"></a>7.4.2、分⽀</h3><ul><li><p>th:if 如果条件不成⽴，则不显示此标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;b.bookPrice&#125;&gt;40&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>太贵！！！<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;b.bookPrice&#125;&gt;40&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>太贵！！！<span class="tag">&lt;/<span class="name">td</span>&gt;</span> //等同于取反</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;b.bookPrice&#125;&lt;=40&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:green&quot;</span>&gt;</span>推荐购买<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>th:switch 和 th:case</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;b.bookPrice&#125;/10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:case</span>=<span class="string">&quot;3&quot;</span>&gt;</span>建议购买<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:case</span>=<span class="string">&quot;4&quot;</span>&gt;</span>价格合理<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>价格不合理<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.gender&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:case</span>=<span class="string">&quot;M&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:case</span>=<span class="string">&quot;F&quot;</span>&gt;</span>⼥<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>性别不详<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="7-5、碎片使用"><a href="#7-5、碎片使用" class="headerlink" title="7.5、碎片使用"></a>7.5、碎片使用</h2><h3 id="7-5-1-碎⽚的概念"><a href="#7-5-1-碎⽚的概念" class="headerlink" title="7.5.1 碎⽚的概念"></a>7.5.1 碎⽚的概念</h3><blockquote><p>碎⽚，就是HTML⽚段，我们可以将多个⻚⾯中使⽤的相同的HTML标签部分单独定义，然后通过th:include可以在HTML⽹⻚中引⼊定义的碎⽚</p></blockquote><p><img src="/2022/03/03/SpringBoot/image-20220211152305130.png" alt="image-20220211152305130"></p><h3 id="7-5-2-碎⽚使⽤案例"><a href="#7-5-2-碎⽚使⽤案例" class="headerlink" title="7.5.2 碎⽚使⽤案例"></a>7.5.2 碎⽚使⽤案例</h3><ul><li><p>定义碎⽚ th:fragment</p><ul><li><p>header.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;fragment1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 80px;background: deepskyblue;</span></span></span><br><span class="line"><span class="string"><span class="tag">                                            color:white; font-size: 25px;&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">            呜啦啦   头部碎片</span></span></span><br><span class="line"><span class="string"><span class="tag">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;/body&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">&lt;/html&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>footer.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;fragment2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 80px;background: deepskyblue;</span></span></span><br><span class="line"><span class="string"><span class="tag">                                            color:white; font-size: 25px;&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">            呜啦啦   脚部碎片</span></span></span><br><span class="line"><span class="string"><span class="tag">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;/body&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">&lt;/html&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>引⽤碎⽚ th:include 和 th:replace(区别：include不带样式，replace带样式)</p><ul><li><p>a.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div th:include=&quot;header::fragment1&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;header::fragment1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 500px&quot;</span>&gt;</span></span><br><span class="line">            定义内容</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div th:include=&quot;footer::fragment2&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer::fragment2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="⼋、SpringBoot应⽤的热部署配置"><a href="#⼋、SpringBoot应⽤的热部署配置" class="headerlink" title="⼋、SpringBoot应⽤的热部署配置"></a>⼋、SpringBoot应⽤的热部署配置</h1><h2 id="8-1-热部署"><a href="#8-1-热部署" class="headerlink" title="8.1 热部署"></a>8.1 热部署</h2><blockquote><p>项⽬⾸次部署、服务启动之后，如果应⽤发⽣了变化、⽽且IDEA感知到了应⽤的变化，就⾃动的完成jar的更新，⽆需⼿动再次启动服务器，就可以访问应⽤的更新。</p></blockquote><h2 id="8-2-热部署配置"><a href="#8-2-热部署配置" class="headerlink" title="8.2 热部署配置"></a>8.2 热部署配置</h2><h3 id="8-2-1-IDE配置（idea）"><a href="#8-2-1-IDE配置（idea）" class="headerlink" title="8.2.1 IDE配置（idea）"></a>8.2.1 IDE配置（idea）</h3><ul><li><p>File—settings</p><p><img src="/2022/03/03/SpringBoot/image-20220211154449689.png" alt="image-20220211154449689"></p></li><li><p>高级选项</p></li></ul><p><img src="/2022/03/03/SpringBoot/image-20220211154333608.png" alt="image-20220211154333608"></p><h3 id="8-2-2-SpringBoot项⽬配置"><a href="#8-2-2-SpringBoot项⽬配置" class="headerlink" title="8.2.2 SpringBoot项⽬配置"></a>8.2.2 SpringBoot项⽬配置</h3><ul><li><p>在需要进⾏热部署的SpringBoot应⽤中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置SpringBoot的Maven插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xu.springssm.SpringSsmApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置SpringBoot应⽤的变化更新策略</p><p><img src="/2022/03/03/SpringBoot/image-20220211155728717.png" alt="image-20220211155728717"></p></li></ul><p>热部署会在你切换到另一个文件之后开始热部署。 </p>]]></content>
    
    
    <summary type="html">这个笔记是在做实战项目蜂蜜商城时候，补充的知识点，较为基础。包括简介、部署、整合SSM、Thymeleaf模板等</summary>
    
    
    
    <category term="SpringBoot" scheme="http://xuzb0312.github.io/categories/SpringBoot/"/>
    
    
    <category term="Java" scheme="http://xuzb0312.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
